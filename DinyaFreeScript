loadstring((function(b64) local chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; local result = ''; local val = 0; local valb = -8; for i = 1, #b64 do local c = b64:sub(i,i); if c ~= '=' then local pos = chars:find(c) - 1; val = val * 64 + pos; valb = valb + 6; if valb >= 0 then result = result .. string.char(math.floor(val / 2^valb) % 256); val = val % 2^valb; valb = valb - 8; end; end; end; return result; end)("bG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQpsb2NhbCBUd2VlblNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlR3ZWVuU2VydmljZSIpCmxvY2FsIFJ1blNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKQpsb2NhbCBTdGF0cyA9IGdhbWU6R2V0U2VydmljZSgiU3RhdHMiKQpsb2NhbCBXb3Jrc3BhY2UgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpCmxvY2FsIExpZ2h0aW5nID0gZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpCmxvY2FsIEh0dHBTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpCmxvY2FsIFJlcGxpY2F0ZWRTdG9yYWdlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpCmxvY2FsIFRlbGVwb3J0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIikKbG9jYWwgVmlydHVhbElucHV0TWFuYWdlciA9IGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpCgpsb2NhbCBwbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIGNoYXJhY3RlciA9IHBsYXllci5DaGFyYWN0ZXIgb3IgcGxheWVyLkNoYXJhY3RlckFkZGVkOldhaXQoKQpsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkIikKbG9jYWwgY2FtZXJhID0gV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKCmxvY2FsIERlYnJpcyA9IGdhbWU6R2V0U2VydmljZSgiRGVicmlzIikKbG9jYWwgc2V0dGluZ3MgPSB7CglvcGVuID0gZmFsc2UsCgltaW5pbWl6ZWQgPSBmYWxzZSwKCXBvc2l0aW9uID0ge3ggPSAwLjUsIHkgPSAzNX0sCgl3YXRlcm1hcmsgPSB7CgkJZW5hYmxlZCA9IHRydWUsCgkJcG9zaXRpb24gPSB7eCA9IDEsIHkgPSAxfQoJfSwKCWN1cnJlbnRUYWIgPSAiTWFpbiIsCglmbHlFbmFibGVkID0gZmFsc2UsCglmbHlTcGVlZCA9IDUwLAoJd2Fsa1NwZWVkID0gMTYsCglqdW1wUG93ZXIgPSA1MCwKCWZpcmVFbmFibGVkID0gZmFsc2UsCglmaXJlQ29sb3IgPSBDb2xvcjMubmV3KDEsIDAsIDApLAoJZGlzY29FbmFibGVkID0gZmFsc2UsCglub2NsaXBFbmFibGVkID0gZmFsc2UsCglmcmVlemVFbmFibGVkID0gZmFsc2UsCglzd2ltRW5hYmxlZCA9IGZhbHNlLAoJc3BhbUVuYWJsZWQgPSBmYWxzZSwKCXNwYW1NZXNzYWdlID0gImRpbnlhLmZyZWUgaXMgdGhlIGJlc3QhIiwKCXNwYW1EZWxheSA9IDEsCgl0aGVtZSA9ICJCbHVlIiwKCWNoYW1zRW5hYmxlZCA9IGZhbHNlLAoJY2hhbXNDb2xvciA9IENvbG9yMy5uZXcoMSwgMCwgMCksCgljaGFtc1RyYW5zcGFyZW5jeSA9IDAuNSwKCWNoYW1zVGVhbUNoZWNrID0gZmFsc2UsCgljaGFtc0ZpbGwgPSB0cnVlLAoJY2hhbXNPdXRsaW5lID0gdHJ1ZSwKCWNoYW1zT3V0bGluZUNvbG9yID0gQ29sb3IzLm5ldygxLCAxLCAwKSwKCWNoYW1zRmlsbENvbG9yID0gQ29sb3IzLm5ldygxLCAwLCAwLCAwLjUpLAoJZ29kTW9kZUVuYWJsZWQgPSBmYWxzZSwKCXNlbGVjdGVkUGxheWVyID0gbmlsLAoJc2Nyb2xsU3BlZWQgPSA1LAoJc2Nyb2xsRW5hYmxlZCA9IHRydWUsCgljaGluYUhhdEVuYWJsZWQgPSB0cnVlLAoJZm92RW5hYmxlZCA9IGZhbHNlLAoJY3VzdG9tRm92ID0gNzAsCglrZXliaW5kcyA9IHsKCQl0b2dnbGVNZW51ID0gRW51bS5LZXlDb2RlLlJpZ2h0U2hpZnQsCgkJZmx5ID0gRW51bS5LZXlDb2RlLkYsCgkJbm9jbGlwID0gRW51bS5LZXlDb2RlLk4sCgkJcmVqb2luID0gRW51bS5LZXlDb2RlLlIKCX0sCglhdXRvRmFybUVuYWJsZWQgPSBmYWxzZSwKCWZha2VMYWdFbmFibGVkID0gZmFsc2UsCglmYWtlTGFnQW1vdW50ID0gMC4xLAoJaW52aXNpYmxlRW5hYmxlZCA9IGZhbHNlLAoJYmhvcEVuYWJsZWQgPSBmYWxzZSwKCWluZmluaXRlSnVtcEVuYWJsZWQgPSBmYWxzZSwKCWNyb3NzaGFpckVuYWJsZWQgPSBmYWxzZSwKCXRyYWNlcnNFbmFibGVkID0gZmFsc2UsCglmdWxsYnJpZ2h0RW5hYmxlZCA9IGZhbHNlLAoJbm9Gb2dFbmFibGVkID0gZmFsc2UsCglhbnRpQWZrRW5hYmxlZCA9IGZhbHNlLAoJc3BpbmJvdEVuYWJsZWQgPSBmYWxzZSwKCXNwaW5ib3RTcGVlZCA9IDIwCn0KCmxvY2FsIHRoZW1lcyA9IHsKCURhcmsgPSB7CgkJbmFtZSA9ICJEYXJrIiwKCQliYWNrZ3JvdW5kQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigzMCwgMzAsIDM1KSwKCQl0aXRsZUNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjUsIDI1LCAzMCksCgkJdGV4dENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSksCgkJYnV0dG9uQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig1MCwgNTAsIDYwKSwKCQlhY3RpdmVUYWJDb2xvciA9IENvbG9yMy5mcm9tUkdCKDYwLCA2MCwgNzApLAoJCWluYWN0aXZlVGFiQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig0MCwgNDAsIDQ1KSwKCQl3YXRlcm1hcmtDb2xvciA9IENvbG9yMy5mcm9tUkdCKDIwLCAyMCwgMjUpLAoJCWFjY2VudENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjAwLCAyMDAsIDI1NSksCgkJdG9nZ2xlT25Db2xvciA9IENvbG9yMy5mcm9tUkdCKDE1MCwgMjU1LCAxNTApLAoJCXRvZ2dsZU9mZkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxNTAsIDE1MCksCgkJaGlnaGxpZ2h0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjU1KSwKCQloYXRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyNTUpCgl9LAoJTGlnaHQgPSB7CgkJbmFtZSA9ICJMaWdodCIsCgkJYmFja2dyb3VuZENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjQwLCAyNDAsIDI0NSksCgkJdGl0bGVDb2xvciA9IENvbG9yMy5mcm9tUkdCKDIzMCwgMjMwLCAyMzUpLAoJCXRleHRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDUwLCA1MCwgNTApLAoJCWJ1dHRvbkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjIwLCAyMjAsIDIyNSksCgkJYWN0aXZlVGFiQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjEwKSwKCQlpbmFjdGl2ZVRhYkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjEwLCAyMTAsIDIyMCksCgkJd2F0ZXJtYXJrQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyMzAsIDIzMCwgMjM1KSwKCQlhY2NlbnRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDEwMCwgMTAwLCAyMDApLAoJCXRvZ2dsZU9uQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxMDAsIDIwMCwgMTAwKSwKCQl0b2dnbGVPZmZDb2xvciA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMTAwLCAxMDApLAoJCWhpZ2hsaWdodENvbG9yID0gQ29sb3IzLmZyb21SR0IoMTAwLCAxMDAsIDIwMCksCgkJaGF0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigxMDAsIDEwMCwgMjAwKQoJfSwKCVB1cnBsZSA9IHsKCQluYW1lID0gIlB1cnBsZSIsCgkJYmFja2dyb3VuZENvbG9yID0gQ29sb3IzLmZyb21SR0IoNDAsIDMwLCA1MCksCgkJdGl0bGVDb2xvciA9IENvbG9yMy5mcm9tUkdCKDUwLCAzNSwgNjUpLAoJCXRleHRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpLAoJCWJ1dHRvbkNvbG9yID0gQ29sb3IzLmZyb21SR0IoNjAsIDQ1LCA3NSksCgkJYWN0aXZlVGFiQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig4MCwgNTUsIDk1KSwKCQlpbmFjdGl2ZVRhYkNvbG9yID0gQ29sb3IzLmZyb21SR0IoNTAsIDQwLCA2MCksCgkJd2F0ZXJtYXJrQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigzMCwgMjAsIDQwKSwKCQlhY2NlbnRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDE4MCwgMTIwLCAyMjApLAoJCXRvZ2dsZU9uQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxMjAsIDIyMCwgMTIwKSwKCQl0b2dnbGVPZmZDb2xvciA9IENvbG9yMy5mcm9tUkdCKDIyMCwgMTIwLCAxMjApLAoJCWhpZ2hsaWdodENvbG9yID0gQ29sb3IzLmZyb21SR0IoMTgwLCAxMjAsIDIyMCksCgkJaGF0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigxODAsIDEyMCwgMjIwKQoJfSwKCUJsdWUgPSB7CgkJbmFtZSA9ICJCbHVlIiwKCQliYWNrZ3JvdW5kQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNSwgMzUsIDYwKSwKCQl0aXRsZUNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjAsIDMwLCA1NSksCgkJdGV4dENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjIwLCAyMzAsIDI1NSksCgkJYnV0dG9uQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig0MCwgNjAsIDkwKSwKCQlhY3RpdmVUYWJDb2xvciA9IENvbG9yMy5mcm9tUkdCKDYwLCA4MCwgMTIwKSwKCQlpbmFjdGl2ZVRhYkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMzAsIDUwLCA4MCksCgkJd2F0ZXJtYXJrQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxNSwgMjUsIDUwKSwKCQlhY2NlbnRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDEwMCwgMTUwLCAyNTUpLAoJCXRvZ2dsZU9uQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxMDAsIDI1NSwgMTUwKSwKCQl0b2dnbGVPZmZDb2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTAwLCAxMDApLAoJCWhpZ2hsaWdodENvbG9yID0gQ29sb3IzLmZyb21SR0IoMTAwLCAxODAsIDI1NSksCgkJaGF0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigxMDAsIDE4MCwgMjU1KQoJfSwKCU1hbmdvID0gewoJCW5hbWUgPSAiTWFuZ28iLAoJCWJhY2tncm91bmRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDQ1LCAzMCwgMTUpLAoJCXRpdGxlQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig0MCwgMjUsIDEwKSwKCQl0ZXh0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDIzMCwgMjAwKSwKCQlidXR0b25Db2xvciA9IENvbG9yMy5mcm9tUkdCKDgwLCA1MCwgMjApLAoJCWFjdGl2ZVRhYkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMTIwLCA4MCwgMzApLAoJCWluYWN0aXZlVGFiQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig2MCwgNDAsIDE1KSwKCQl3YXRlcm1hcmtDb2xvciA9IENvbG9yMy5mcm9tUkdCKDMwLCAyMCwgMTApLAoJCWFjY2VudENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxNTAsIDUwKSwKCQl0b2dnbGVPbkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMTUwLCAyNTUsIDEwMCksCgkJdG9nZ2xlT2ZmQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDEwMCwgMTAwKSwKCQloaWdobGlnaHRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTgwLCA4MCksCgkJaGF0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDE4MCwgODApCgl9LAoJQXN0b2xmbyA9IHsKCQluYW1lID0gIkFzdG9sZm8iLAoJCWJhY2tncm91bmRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDYwLCAyNSwgNzApLAoJCXRpdGxlQ29sb3IgPSBDb2xvcjMuZnJvbVJHQig1MCwgMjAsIDYwKSwKCQl0ZXh0Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDIyMCwgMjU1KSwKCQlidXR0b25Db2xvciA9IENvbG9yMy5mcm9tUkdCKDkwLCA0MCwgMTAwKSwKCQlhY3RpdmVUYWJDb2xvciA9IENvbG9yMy5mcm9tUkdCKDEyMCwgNjAsIDEzMCksCgkJaW5hY3RpdmVUYWJDb2xvciA9IENvbG9yMy5mcm9tUkdCKDcwLCAzMCwgODApLAoJCXdhdGVybWFya0NvbG9yID0gQ29sb3IzLmZyb21SR0IoNDAsIDE1LCA1MCksCgkJYWNjZW50Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDEyMCwgMjU1KSwKCQl0b2dnbGVPbkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMTgwLCAyNTUsIDEyMCksCgkJdG9nZ2xlT2ZmQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDEwMCwgMTAwKSwKCQloaWdobGlnaHRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTUwLCAyNTUpLAoJCWhhdENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxNTAsIDI1NSkKCX0KfQoKLS0gRWZmZWN0IHZhcmlhYmxlcwpsb2NhbCBmaXJlUGFydHMgPSB7fQpsb2NhbCBmaXJlQ29ubmVjdGlvbnMgPSB7fQpsb2NhbCBkaXNjb0Nvbm5lY3Rpb25zID0ge30KbG9jYWwgb3JpZ2luYWxDb2xvcnMgPSB7fQpsb2NhbCBub2NsaXBDb25uZWN0aW9uCmxvY2FsIGZyZWV6ZUNvbm5lY3Rpb24KbG9jYWwgc3dpbUNvbm5lY3Rpb24KbG9jYWwgc3BhbUNvbm5lY3Rpb24KbG9jYWwgY2hhbXNDb25uZWN0aW9ucyA9IHt9CmxvY2FsIGNoYW1zSW5zdGFuY2VzID0ge30KbG9jYWwgZ29kTW9kZUNvbm5lY3Rpb24KbG9jYWwgcGxheWVyTGlzdEZyYW1lCmxvY2FsIHBsYXllckxpc3RDb250ZW50CmxvY2FsIGF1dG9GYXJtQ29ubmVjdGlvbgpsb2NhbCBmYWtlTGFnQ29ubmVjdGlvbgpsb2NhbCBpbnZpc2libGVQYXJ0cyA9IHt9CmxvY2FsIGJob3BDb25uZWN0aW9uCmxvY2FsIGluZmluaXRlSnVtcENvbm5lY3Rpb24KbG9jYWwgY3Jvc3NoYWlyRnJhbWUKbG9jYWwgdHJhY2VyQ29ubmVjdGlvbnMgPSB7fQpsb2NhbCBhbnRpQWZrQ29ubmVjdGlvbgpsb2NhbCBzcGluYm90Q29ubmVjdGlvbgpsb2NhbCBvcmlnaW5hbExpZ2h0aW5nID0gewoJQW1iaWVudCA9IExpZ2h0aW5nLkFtYmllbnQsCglCcmlnaHRuZXNzID0gTGlnaHRpbmcuQnJpZ2h0bmVzcywKCUZvZ0VuZCA9IExpZ2h0aW5nLkZvZ0VuZAp9CgotLSBDcmVhdGUgR1VJCmxvY2FsIGd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIikKZ3VpLk5hbWUgPSAiRGlueWFHVUlfIiAuLiBIdHRwU2VydmljZTpHZW5lcmF0ZUdVSUQoZmFsc2UpCmd1aS5SZXNldE9uU3Bhd24gPSBmYWxzZQpndWkuUGFyZW50ID0gcGxheWVyOldhaXRGb3JDaGlsZCgiUGxheWVyR3VpIikKCi0tIFdhdGVybWFyawpsb2NhbCB3YXRlcm1hcmsgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKd2F0ZXJtYXJrLk5hbWUgPSAiV2F0ZXJtYXJrIgp3YXRlcm1hcmsuU2l6ZSA9IFVEaW0yLm5ldygwLCAzNTAsIDAsIDI0KQp3YXRlcm1hcmsuUG9zaXRpb24gPSBVRGltMi5uZXcoc2V0dGluZ3Mud2F0ZXJtYXJrLnBvc2l0aW9uLngvMTAwLCAwLCBzZXR0aW5ncy53YXRlcm1hcmsucG9zaXRpb24ueS8xMDAsIDApCndhdGVybWFyay5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC43CndhdGVybWFyay5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS53YXRlcm1hcmtDb2xvcgp3YXRlcm1hcmsuQm9yZGVyU2l6ZVBpeGVsID0gMAp3YXRlcm1hcmsuVmlzaWJsZSA9IHNldHRpbmdzLndhdGVybWFyay5lbmFibGVkCndhdGVybWFyay5QYXJlbnQgPSBndWkKCmxvY2FsIHdhdGVybWFya0Nvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQp3YXRlcm1hcmtDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNikKd2F0ZXJtYXJrQ29ybmVyLlBhcmVudCA9IHdhdGVybWFyawoKbG9jYWwgYWNjZW50TGluZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQphY2NlbnRMaW5lLk5hbWUgPSAiQWNjZW50TGluZSIKYWNjZW50TGluZS5TaXplID0gVURpbTIubmV3KDAsIDQsIDEsIDApCmFjY2VudExpbmUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMCkKYWNjZW50TGluZS5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5hY2NlbnRDb2xvcgphY2NlbnRMaW5lLkJvcmRlclNpemVQaXhlbCA9IDAKYWNjZW50TGluZS5QYXJlbnQgPSB3YXRlcm1hcmsKCmxvY2FsIHdhdGVybWFya1RleHQgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCndhdGVybWFya1RleHQuVGV4dCA9ICJkaW55YS5mcmVlIHwgdjEuMCB8IGxvYWRpbmcuLi4iCndhdGVybWFya1RleHQuU2l6ZSA9IFVEaW0yLm5ldygwLjcsIC0xMCwgMSwgMCkKd2F0ZXJtYXJrVGV4dC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA4LCAwLCAwKQp3YXRlcm1hcmtUZXh0LlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgp3YXRlcm1hcmtUZXh0LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCndhdGVybWFya1RleHQuRm9udCA9IEVudW0uRm9udC5Hb3RoYW0Kd2F0ZXJtYXJrVGV4dC5UZXh0U2l6ZSA9IDE0CndhdGVybWFya1RleHQuVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQKd2F0ZXJtYXJrVGV4dC5QYXJlbnQgPSB3YXRlcm1hcmsKCmxvY2FsIHRpbWVMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKdGltZUxhYmVsLk5hbWUgPSAiVGltZUxhYmVsIgp0aW1lTGFiZWwuVGV4dCA9ICIwMDowMDowMCIKdGltZUxhYmVsLlNpemUgPSBVRGltMi5uZXcoMC4zLCAtMTAsIDEsIDApCnRpbWVMYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjcsIDAsIDAsIDApCnRpbWVMYWJlbC5UZXh0Q29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS50ZXh0Q29sb3IKdGltZUxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCnRpbWVMYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbQp0aW1lTGFiZWwuVGV4dFNpemUgPSAxNAp0aW1lTGFiZWwuVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LlJpZ2h0CnRpbWVMYWJlbC5QYXJlbnQgPSB3YXRlcm1hcmsKCi0tIE1haW4gZnJhbWUKbG9jYWwgbWFpbkZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCm1haW5GcmFtZS5OYW1lID0gIk1haW5GcmFtZSIKbWFpbkZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgMzAwLCAwLCA0MDApCm1haW5GcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldyhzZXR0aW5ncy5wb3NpdGlvbi54LzEwMCwgMCwgMCwgc2V0dGluZ3MucG9zaXRpb24ueSkKbWFpbkZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLmJhY2tncm91bmRDb2xvcgptYWluRnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMAptYWluRnJhbWUuQ2xpcHNEZXNjZW5kYW50cyA9IHRydWUKbWFpbkZyYW1lLlZpc2libGUgPSBzZXR0aW5ncy5vcGVuCm1haW5GcmFtZS5QYXJlbnQgPSBndWkKCmxvY2FsIG1haW5GcmFtZUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQptYWluRnJhbWVDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKbWFpbkZyYW1lQ29ybmVyLlBhcmVudCA9IG1haW5GcmFtZQoKbG9jYWwgdGl0bGUgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCnRpdGxlLlRleHQgPSAiZGlueWEuZnJlZSIKdGl0bGUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAzMCkKdGl0bGUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMCkKdGl0bGUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udGl0bGVDb2xvcgp0aXRsZS5UZXh0Q29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS50ZXh0Q29sb3IKdGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCnRpdGxlLlRleHRTaXplID0gMTgKdGl0bGUuUGFyZW50ID0gbWFpbkZyYW1lCgpsb2NhbCB0aXRsZUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQp0aXRsZUNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA4KQp0aXRsZUNvcm5lci5QYXJlbnQgPSB0aXRsZQoKbG9jYWwgbWluaW1pemVCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQptaW5pbWl6ZUJ1dHRvbi5UZXh0ID0gIi0iCm1pbmltaXplQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzAsIDAsIDMwKQptaW5pbWl6ZUJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMzAsIDAsIDApCm1pbmltaXplQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRpdGxlQ29sb3IKbWluaW1pemVCdXR0b24uVGV4dENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udGV4dENvbG9yCm1pbmltaXplQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZAptaW5pbWl6ZUJ1dHRvbi5UZXh0U2l6ZSA9IDE4Cm1pbmltaXplQnV0dG9uLlBhcmVudCA9IHRpdGxlCgpsb2NhbCBtaW5pbWl6ZWRGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQptaW5pbWl6ZWRGcmFtZS5OYW1lID0gIk1pbmltaXplZEZyYW1lIgptaW5pbWl6ZWRGcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDQwLCAwLCA0MCkKbWluaW1pemVkRnJhbWUuUG9zaXRpb24gPSBtYWluRnJhbWUuUG9zaXRpb24KbWluaW1pemVkRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0uYWNjZW50Q29sb3IKbWluaW1pemVkRnJhbWUuVmlzaWJsZSA9IGZhbHNlCm1pbmltaXplZEZyYW1lLlBhcmVudCA9IGd1aQoKbG9jYWwgbWluaW1pemVkQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCm1pbmltaXplZENvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygxLCAwKQptaW5pbWl6ZWRDb3JuZXIuUGFyZW50ID0gbWluaW1pemVkRnJhbWUKCmxvY2FsIG1pbmltaXplZFRleHQgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCm1pbmltaXplZFRleHQuVGV4dCA9ICJEIgptaW5pbWl6ZWRUZXh0LlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKbWluaW1pemVkVGV4dC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKQptaW5pbWl6ZWRUZXh0LlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgptaW5pbWl6ZWRUZXh0LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCm1pbmltaXplZFRleHQuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCm1pbmltaXplZFRleHQuVGV4dFNpemUgPSAyMAptaW5pbWl6ZWRUZXh0LlBhcmVudCA9IG1pbmltaXplZEZyYW1lCgotLSBUYWJzCmxvY2FsIHRhYnMgPSB7Ik1haW4iLCAiUGxheWVyIiwgIlZpc3VhbCIsICJGdW4iLCAiQ29uZmlnIiwgIkNyZWRpdHMifQpsb2NhbCB0YWJCdXR0b25zID0ge30KbG9jYWwgY29udGVudEZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCmNvbnRlbnRGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIC02MCkKY29udGVudEZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDYwKQpjb250ZW50RnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKY29udGVudEZyYW1lLlBhcmVudCA9IG1haW5GcmFtZQoKLS0gUGxheWVyIExpc3QgRnJhbWUKcGxheWVyTGlzdEZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCnBsYXllckxpc3RGcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDIwMCwgMCwgMzAwKQpwbGF5ZXJMaXN0RnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTAwLCAwLjUsIC0xNTApCnBsYXllckxpc3RGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5iYWNrZ3JvdW5kQ29sb3IKcGxheWVyTGlzdEZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDAKcGxheWVyTGlzdEZyYW1lLlZpc2libGUgPSBmYWxzZQpwbGF5ZXJMaXN0RnJhbWUuUGFyZW50ID0gZ3VpCgpsb2NhbCBwbGF5ZXJMaXN0VGl0bGUgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCnBsYXllckxpc3RUaXRsZS5UZXh0ID0gIlNlbGVjdCBQbGF5ZXIiCnBsYXllckxpc3RUaXRsZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDMwKQpwbGF5ZXJMaXN0VGl0bGUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMCkKcGxheWVyTGlzdFRpdGxlLkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRpdGxlQ29sb3IKcGxheWVyTGlzdFRpdGxlLlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgpwbGF5ZXJMaXN0VGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCnBsYXllckxpc3RUaXRsZS5UZXh0U2l6ZSA9IDE2CnBsYXllckxpc3RUaXRsZS5QYXJlbnQgPSBwbGF5ZXJMaXN0RnJhbWUKCmxvY2FsIHBsYXllckxpc3RDbG9zZSA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCnBsYXllckxpc3RDbG9zZS5UZXh0ID0gIlgiCnBsYXllckxpc3RDbG9zZS5TaXplID0gVURpbTIubmV3KDAsIDMwLCAwLCAzMCkKcGxheWVyTGlzdENsb3NlLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0zMCwgMCwgMCkKcGxheWVyTGlzdENsb3NlLkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRpdGxlQ29sb3IKcGxheWVyTGlzdENsb3NlLlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgpwbGF5ZXJMaXN0Q2xvc2UuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCnBsYXllckxpc3RDbG9zZS5UZXh0U2l6ZSA9IDE2CnBsYXllckxpc3RDbG9zZS5QYXJlbnQgPSBwbGF5ZXJMaXN0RnJhbWUKCnBsYXllckxpc3RDbG9zZS5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKCXBsYXllckxpc3RGcmFtZS5WaXNpYmxlID0gZmFsc2UKZW5kKQoKcGxheWVyTGlzdENvbnRlbnQgPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIikKcGxheWVyTGlzdENvbnRlbnQuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtMzApCnBsYXllckxpc3RDb250ZW50LlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDMwKQpwbGF5ZXJMaXN0Q29udGVudC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpwbGF5ZXJMaXN0Q29udGVudC5Cb3JkZXJTaXplUGl4ZWwgPSAwCnBsYXllckxpc3RDb250ZW50LkF1dG9tYXRpY0NhbnZhc1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuWQpwbGF5ZXJMaXN0Q29udGVudC5TY3JvbGxCYXJUaGlja25lc3MgPSA1CnBsYXllckxpc3RDb250ZW50LlBhcmVudCA9IHBsYXllckxpc3RGcmFtZQoKLS0gQ3Jvc3NoYWlyCmNyb3NzaGFpckZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCmNyb3NzaGFpckZyYW1lLk5hbWUgPSAiQ3Jvc3NoYWlyIgpjcm9zc2hhaXJGcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDIwLCAwLCAyMCkKY3Jvc3NoYWlyRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTAsIDAuNSwgLTEwKQpjcm9zc2hhaXJGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpjcm9zc2hhaXJGcmFtZS5WaXNpYmxlID0gZmFsc2UKY3Jvc3NoYWlyRnJhbWUuUGFyZW50ID0gZ3VpCgpsb2NhbCBob3Jpem9udGFsID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCmhvcml6b250YWwuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyKQpob3Jpem9udGFsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAuNSwgLTEpCmhvcml6b250YWwuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMSwgMSkKaG9yaXpvbnRhbC5Cb3JkZXJTaXplUGl4ZWwgPSAwCmhvcml6b250YWwuUGFyZW50ID0gY3Jvc3NoYWlyRnJhbWUKCmxvY2FsIHZlcnRpY2FsID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCnZlcnRpY2FsLlNpemUgPSBVRGltMi5uZXcoMCwgMiwgMSwgMCkKdmVydGljYWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMSwgMCwgMCkKdmVydGljYWwuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMSwgMSkKdmVydGljYWwuQm9yZGVyU2l6ZVBpeGVsID0gMAp2ZXJ0aWNhbC5QYXJlbnQgPSBjcm9zc2hhaXJGcmFtZQoKLS0gVUkgQ3JlYXRpb24gRnVuY3Rpb25zCmxvY2FsIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKQoJbG9jYWwgdGltZSA9IG9zLmRhdGUoIiEqdCIpCgl0aW1lLmhvdXIgPSAodGltZS5ob3VyICsgMykgJSAyNCAtLSBNU0sgKFVUQyszKQoJdGltZUxhYmVsLlRleHQgPSBzdHJpbmcuZm9ybWF0KCIlMDJkOiUwMmQ6JTAyZCBNU0siLCB0aW1lLmhvdXIsIHRpbWUubWluLCB0aW1lLnNlYykKZW5kCgpsb2NhbCBmdW5jdGlvbiB1cGRhdGVQbGF5ZXJMaXN0KCkKCXBsYXllckxpc3RDb250ZW50OkNsZWFyQWxsQ2hpbGRyZW4oKQoKCWxvY2FsIHlQb3MgPSAwCglmb3IgXywgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KCQlpZiBwbGF5ZXIgfj0gUGxheWVycy5Mb2NhbFBsYXllciB0aGVuCgkJCWxvY2FsIHBsYXllckJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCgkJCXBsYXllckJ1dHRvbi5UZXh0ID0gcGxheWVyLk5hbWUKCQkJcGxheWVyQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMSwgLTEwLCAwLCAzMCkKCQkJcGxheWVyQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDUsIDAsIHlQb3MpCgkJCXBsYXllckJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gc2V0dGluZ3Muc2VsZWN0ZWRQbGF5ZXIgPT0gcGxheWVyIGFuZCB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLmhpZ2hsaWdodENvbG9yIG9yIHRoZW1lc1tzZXR0aW5ncy50aGVtZV0uYnV0dG9uQ29sb3IKCQkJcGxheWVyQnV0dG9uLlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgoJCQlwbGF5ZXJCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW0KCQkJcGxheWVyQnV0dG9uLlRleHRTaXplID0gMTQKCQkJcGxheWVyQnV0dG9uLlBhcmVudCA9IHBsYXllckxpc3RDb250ZW50CgoJCQlwbGF5ZXJCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCgkJCQlzZXR0aW5ncy5zZWxlY3RlZFBsYXllciA9IHBsYXllcgoJCQkJdXBkYXRlUGxheWVyTGlzdCgpCgkJCWVuZCkKCgkJCXlQb3MgPSB5UG9zICsgMzUKCQllbmQKCWVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZUxhYmVsKHRleHQsIHBvc2l0aW9uLCBpbmRlbnQpCglsb2NhbCBsYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKCWxhYmVsLlRleHQgPSBzdHJpbmcucmVwKCIgIiwgaW5kZW50IG9yIDApIC4uIHRleHQKCWxhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgLTEwLCAwLCAyMCkKCWxhYmVsLlBvc2l0aW9uID0gcG9zaXRpb24KCWxhYmVsLlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgoJbGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCWxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCglsYWJlbC5UZXh0U2l6ZSA9IDE0CglsYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdAoJbGFiZWwuUGFyZW50ID0gY29udGVudEZyYW1lCglyZXR1cm4gbGFiZWwKZW5kCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVCdXR0b24odGV4dCwgcG9zaXRpb24sIGNhbGxiYWNrKQoJbG9jYWwgYnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKCWJ1dHRvbi5UZXh0ID0gIiAgIiAuLiB0ZXh0CglidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDAsIDIwKQoJYnV0dG9uLlBvc2l0aW9uID0gcG9zaXRpb24KCWJ1dHRvbi5UZXh0Q29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5hY2NlbnRDb2xvcgoJYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLmJ1dHRvbkNvbG9yCglidXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW0KCWJ1dHRvbi5UZXh0U2l6ZSA9IDE0CglidXR0b24uVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQKCWJ1dHRvbi5QYXJlbnQgPSBjb250ZW50RnJhbWUKCglsb2NhbCBidXR0b25Db3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIikKCWJ1dHRvbkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA0KQoJYnV0dG9uQ29ybmVyLlBhcmVudCA9IGJ1dHRvbgoKCWJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGNhbGxiYWNrKQoJcmV0dXJuIGJ1dHRvbgplbmQKCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZVRvZ2dsZSh0ZXh0LCBwb3NpdGlvbiwgdmFsdWUsIGNhbGxiYWNrKQoJbG9jYWwgdG9nZ2xlID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKCXRvZ2dsZS5OYW1lID0gInRvZ2dsZSIKCXRvZ2dsZS5UZXh0ID0gIiAgIiAuLiB0ZXh0Cgl0b2dnbGUuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDAsIDIwKQoJdG9nZ2xlLlBvc2l0aW9uID0gcG9zaXRpb24KCXRvZ2dsZS5UZXh0Q29sb3IzID0gdmFsdWUgYW5kIHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udG9nZ2xlT25Db2xvciBvciB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRvZ2dsZU9mZkNvbG9yCgl0b2dnbGUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0uYnV0dG9uQ29sb3IKCXRvZ2dsZS5Gb250ID0gRW51bS5Gb250LkdvdGhhbQoJdG9nZ2xlLlRleHRTaXplID0gMTQKCXRvZ2dsZS5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdAoJdG9nZ2xlLlBhcmVudCA9IGNvbnRlbnRGcmFtZQoKCWxvY2FsIHRvZ2dsZUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQoJdG9nZ2xlQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDQpCgl0b2dnbGVDb3JuZXIuUGFyZW50ID0gdG9nZ2xlCgoJdG9nZ2xlLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJCXZhbHVlID0gbm90IHZhbHVlCgkJdG9nZ2xlLlRleHRDb2xvcjMgPSB2YWx1ZSBhbmQgdGhlbWVzW3NldHRpbmdzLnRoZW1lXS50b2dnbGVPbkNvbG9yIG9yIHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udG9nZ2xlT2ZmQ29sb3IKCQlpZiBjYWxsYmFjayB0aGVuIGNhbGxiYWNrKHZhbHVlKSBlbmQKCWVuZCkKCglyZXR1cm4ge3RvZ2dsZSA9IHRvZ2dsZSwgdmFsdWUgPSB2YWx1ZX0KZW5kCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVTbGlkZXIodGV4dCwgcG9zaXRpb24sIHZhbHVlLCBtaW4sIG1heCwgY2FsbGJhY2spCglsb2NhbCBmcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQoJZnJhbWUuTmFtZSA9ICJzbGlkZXIiCglmcmFtZS5TaXplID0gVURpbTIubmV3KDEsIC0yMCwgMCwgMjApCglmcmFtZS5Qb3NpdGlvbiA9IHBvc2l0aW9uCglmcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoJZnJhbWUuUGFyZW50ID0gY29udGVudEZyYW1lCgoJbG9jYWwgbGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCglsYWJlbC5UZXh0ID0gIiAgIiAuLiB0ZXh0CglsYWJlbC5TaXplID0gVURpbTIubmV3KDAuNCwgMCwgMSwgMCkKCWxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCglsYWJlbC5UZXh0Q29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS50ZXh0Q29sb3IKCWxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCglsYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbQoJbGFiZWwuVGV4dFNpemUgPSAxNAoJbGFiZWwuVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQKCWxhYmVsLlBhcmVudCA9IGZyYW1lCgoJbG9jYWwgdGV4dEJveCA9IEluc3RhbmNlLm5ldygiVGV4dEJveCIpCgl0ZXh0Qm94LlRleHQgPSB0b3N0cmluZyh2YWx1ZSkKCXRleHRCb3guU2l6ZSA9IFVEaW0yLm5ldygwLjMsIDAsIDEsIDApCgl0ZXh0Qm94LlBvc2l0aW9uID0gVURpbTIubmV3KDAuNCwgMCwgMCwgMCkKCXRleHRCb3guVGV4dENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udGV4dENvbG9yCgl0ZXh0Qm94LkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLmJ1dHRvbkNvbG9yCgl0ZXh0Qm94LkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCgl0ZXh0Qm94LlRleHRTaXplID0gMTQKCglsb2NhbCB0ZXh0Qm94Q29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCgl0ZXh0Qm94Q29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDQpCgl0ZXh0Qm94Q29ybmVyLlBhcmVudCA9IHRleHRCb3gKCgl0ZXh0Qm94LlBhcmVudCA9IGZyYW1lCgoJbG9jYWwgbWludXMgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJbWludXMuVGV4dCA9ICItIgoJbWludXMuU2l6ZSA9IFVEaW0yLm5ldygwLjEsIDAsIDEsIDApCgltaW51cy5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjcsIDAsIDAsIDApCgltaW51cy5UZXh0Q29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS50ZXh0Q29sb3IKCW1pbnVzLkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLmJ1dHRvbkNvbG9yCgltaW51cy5Gb250ID0gRW51bS5Gb250LkdvdGhhbQoJbWludXMuVGV4dFNpemUgPSAxNAoKCWxvY2FsIG1pbnVzQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCgltaW51c0Nvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA0KQoJbWludXNDb3JuZXIuUGFyZW50ID0gbWludXMKCgltaW51cy5QYXJlbnQgPSBmcmFtZQoKCWxvY2FsIHBsdXMgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJcGx1cy5UZXh0ID0gIisiCglwbHVzLlNpemUgPSBVRGltMi5uZXcoMC4xLCAwLCAxLCAwKQoJcGx1cy5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjgsIDAsIDAsIDApCglwbHVzLlRleHRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLnRleHRDb2xvcgoJcGx1cy5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5idXR0b25Db2xvcgoJcGx1cy5Gb250ID0gRW51bS5Gb250LkdvdGhhbQoJcGx1cy5UZXh0U2l6ZSA9IDE0CgoJbG9jYWwgcGx1c0Nvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQoJcGx1c0Nvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA0KQoJcGx1c0Nvcm5lci5QYXJlbnQgPSBwbHVzCgoJcGx1cy5QYXJlbnQgPSBmcmFtZQoKCWxvY2FsIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKG5ld1ZhbHVlKQoJCW5ld1ZhbHVlID0gdG9udW1iZXIobmV3VmFsdWUpIG9yIHZhbHVlCgkJbmV3VmFsdWUgPSBtYXRoLmNsYW1wKG5ld1ZhbHVlLCBtaW4sIG1heCkKCQl0ZXh0Qm94LlRleHQgPSB0b3N0cmluZyhuZXdWYWx1ZSkKCQlpZiBjYWxsYmFjayB0aGVuIGNhbGxiYWNrKG5ld1ZhbHVlKSBlbmQKCQlyZXR1cm4gbmV3VmFsdWUKCWVuZAoKCW1pbnVzLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJCXZhbHVlID0gdXBkYXRlVmFsdWUodmFsdWUgLSAxKQoJZW5kKQoKCXBsdXMuTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCgkJdmFsdWUgPSB1cGRhdGVWYWx1ZSh2YWx1ZSArIDEpCgllbmQpCgoJdGV4dEJveC5Gb2N1c0xvc3Q6Q29ubmVjdChmdW5jdGlvbigpCgkJdmFsdWUgPSB1cGRhdGVWYWx1ZSh0ZXh0Qm94LlRleHQpCgllbmQpCgoJcmV0dXJuIHtmcmFtZSA9IGZyYW1lLCB2YWx1ZSA9IHZhbHVlfQplbmQKCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZVRleHRCb3godGV4dCwgcG9zaXRpb24sIHZhbHVlLCBjYWxsYmFjaykKCWxvY2FsIGZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCglmcmFtZS5OYW1lID0gInRleHRib3giCglmcmFtZS5TaXplID0gVURpbTIubmV3KDEsIC0yMCwgMCwgMjApCglmcmFtZS5Qb3NpdGlvbiA9IHBvc2l0aW9uCglmcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoJZnJhbWUuUGFyZW50ID0gY29udGVudEZyYW1lCgoJbG9jYWwgbGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCglsYWJlbC5UZXh0ID0gIiAgIiAuLiB0ZXh0CglsYWJlbC5TaXplID0gVURpbTIubmV3KDAuMywgMCwgMSwgMCkKCWxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCglsYWJlbC5UZXh0Q29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS50ZXh0Q29sb3IKCWxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCglsYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbQoJbGFiZWwuVGV4dFNpemUgPSAxNAoJbGFiZWwuVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQKCWxhYmVsLlBhcmVudCA9IGZyYW1lCgoJbG9jYWwgdGV4dEJveCA9IEluc3RhbmNlLm5ldygiVGV4dEJveCIpCgl0ZXh0Qm94LlRleHQgPSB0b3N0cmluZyh2YWx1ZSkKCXRleHRCb3guU2l6ZSA9IFVEaW0yLm5ldygwLjcsIDAsIDEsIDApCgl0ZXh0Qm94LlBvc2l0aW9uID0gVURpbTIubmV3KDAuMywgMCwgMCwgMCkKCXRleHRCb3guVGV4dENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udGV4dENvbG9yCgl0ZXh0Qm94LkJhY2tncm91bmRDb2xvcjMgPSB0aGVtZXNbc2V0dGluZ3MudGhlbWVdLmJ1dHRvbkNvbG9yCgl0ZXh0Qm94LkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCgl0ZXh0Qm94LlRleHRTaXplID0gMTQKCXRleHRCb3guUGFyZW50ID0gZnJhbWUKCglsb2NhbCB0ZXh0Qm94Q29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCgl0ZXh0Qm94Q29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDQpCgl0ZXh0Qm94Q29ybmVyLlBhcmVudCA9IHRleHRCb3gKCgl0ZXh0Qm94LkZvY3VzTG9zdDpDb25uZWN0KGZ1bmN0aW9uKCkKCQlpZiBjYWxsYmFjayB0aGVuIGNhbGxiYWNrKHRleHRCb3guVGV4dCkgZW5kCgllbmQpCgoJcmV0dXJuIHtmcmFtZSA9IGZyYW1lLCB0ZXh0Qm94ID0gdGV4dEJveCwgdmFsdWUgPSB2YWx1ZX0KZW5kCgotLSBBcHBseSB0aGVtZSB0byBhbGwgVUkgZWxlbWVudHMKbG9jYWwgZnVuY3Rpb24gYXBwbHlUaGVtZSgpCglsb2NhbCB0aGVtZSA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0KCWlmIG5vdCB0aGVtZSB0aGVuIHJldHVybiBlbmQKCgktLSBNYWluIFVJIGVsZW1lbnRzCgltYWluRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lLmJhY2tncm91bmRDb2xvcgoJdGl0bGUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lLnRpdGxlQ29sb3IKCXRpdGxlLlRleHRDb2xvcjMgPSB0aGVtZS50ZXh0Q29sb3IKCXdhdGVybWFyay5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWUud2F0ZXJtYXJrQ29sb3IKCXdhdGVybWFya1RleHQuVGV4dENvbG9yMyA9IHRoZW1lLnRleHRDb2xvcgoJdGltZUxhYmVsLlRleHRDb2xvcjMgPSB0aGVtZS50ZXh0Q29sb3IKCWFjY2VudExpbmUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lLmFjY2VudENvbG9yCgoJLS0gUGxheWVyIGxpc3QKCXBsYXllckxpc3RGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWUuYmFja2dyb3VuZENvbG9yCglwbGF5ZXJMaXN0VGl0bGUuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lLnRpdGxlQ29sb3IKCXBsYXllckxpc3RUaXRsZS5UZXh0Q29sb3IzID0gdGhlbWUudGV4dENvbG9yCglwbGF5ZXJMaXN0Q2xvc2UuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lLnRpdGxlQ29sb3IKCXBsYXllckxpc3RDbG9zZS5UZXh0Q29sb3IzID0gdGhlbWUudGV4dENvbG9yCgoJLS0gVGFiIGJ1dHRvbnMKCWZvciBfLCBidXR0b24gaW4gcGFpcnModGFiQnV0dG9ucykgZG8KCQlidXR0b24uVGV4dENvbG9yMyA9IHRoZW1lLnRleHRDb2xvcgoJCWJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gYnV0dG9uLlRleHQgPT0gc2V0dGluZ3MuY3VycmVudFRhYiBhbmQgdGhlbWUuYWN0aXZlVGFiQ29sb3Igb3IgdGhlbWUuaW5hY3RpdmVUYWJDb2xvcgoJZW5kCgoJLS0gQ29udGVudCBmcmFtZSBlbGVtZW50cwoJZm9yIF8sIGNoaWxkIGluIGlwYWlycyhjb250ZW50RnJhbWU6R2V0Q2hpbGRyZW4oKSkgZG8KCQlpZiBjaGlsZDpJc0EoIlRleHRMYWJlbCIpIG9yIGNoaWxkOklzQSgiVGV4dEJ1dHRvbiIpIG9yIGNoaWxkOklzQSgiVGV4dEJveCIpIHRoZW4KCQkJY2hpbGQuVGV4dENvbG9yMyA9IHRoZW1lLnRleHRDb2xvcgoJCQlpZiBjaGlsZDpJc0EoIlRleHRCdXR0b24iKSBhbmQgY2hpbGQuTmFtZSA9PSAidG9nZ2xlIiB0aGVuCgkJCQlpZiBjaGlsZC5UZXh0Om1hdGNoKCJFbmFibGVkIikgb3IgY2hpbGQuVGV4dDptYXRjaCgiRmx5Iikgb3IgY2hpbGQuVGV4dDptYXRjaCgiRmlyZSIpIG9yIGNoaWxkLlRleHQ6bWF0Y2goIkRpc2NvIikgb3IgY2hpbGQuVGV4dDptYXRjaCgiTm9jbGlwIikgb3IgY2hpbGQuVGV4dDptYXRjaCgiRnJlZXplIikgb3IgY2hpbGQuVGV4dDptYXRjaCgiU3dpbSIpIG9yIGNoaWxkLlRleHQ6bWF0Y2goIlNwYW0iKSBvciBjaGlsZC5UZXh0Om1hdGNoKCJDaGFtcyIpIG9yIGNoaWxkLlRleHQ6bWF0Y2goIkdvZCBNb2RlIikgdGhlbgoJCQkJCWxvY2FsIGlzT24gPSBjaGlsZC5UZXh0Q29sb3IzID09IHRoZW1lLnRvZ2dsZU9uQ29sb3IKCQkJCQljaGlsZC5UZXh0Q29sb3IzID0gaXNPbiBhbmQgdGhlbWUudG9nZ2xlT25Db2xvciBvciB0aGVtZS50b2dnbGVPZmZDb2xvcgoJCQkJZWxzZQoJCQkJCWNoaWxkLlRleHRDb2xvcjMgPSB0aGVtZS5hY2NlbnRDb2xvcgoJCQkJZW5kCgkJCWVuZAoJCWVuZAoKCQlpZiBjaGlsZDpJc0EoIlRleHRCdXR0b24iKSBvciBjaGlsZDpJc0EoIkZyYW1lIikgdGhlbgoJCQlpZiBjaGlsZC5OYW1lID09ICJ0b2dnbGUiIG9yIGNoaWxkLk5hbWUgPT0gInNsaWRlciIgb3IgY2hpbGQuTmFtZSA9PSAidGV4dGJveCIgdGhlbgoJCQkJY2hpbGQuQmFja2dyb3VuZENvbG9yMyA9IHRoZW1lLmJ1dHRvbkNvbG9yCgkJCWVuZAoJCWVuZAoJZW5kCgoJLS0gVXBkYXRlIHBsYXllciBsaXN0IGNvbG9ycwoJaWYgcGxheWVyTGlzdENvbnRlbnQgdGhlbgoJCWZvciBfLCBjaGlsZCBpbiBpcGFpcnMocGxheWVyTGlzdENvbnRlbnQ6R2V0Q2hpbGRyZW4oKSkgZG8KCQkJaWYgY2hpbGQ6SXNBKCJUZXh0QnV0dG9uIikgdGhlbgoJCQkJY2hpbGQuQmFja2dyb3VuZENvbG9yMyA9IHNldHRpbmdzLnNlbGVjdGVkUGxheWVyIGFuZCBjaGlsZC5UZXh0ID09IHNldHRpbmdzLnNlbGVjdGVkUGxheWVyLk5hbWUgYW5kIHRoZW1lLmhpZ2hsaWdodENvbG9yIG9yIHRoZW1lLmJ1dHRvbkNvbG9yCgkJCQljaGlsZC5UZXh0Q29sb3IzID0gdGhlbWUudGV4dENvbG9yCgkJCWVuZAoJCWVuZAoJZW5kCmVuZAoKLS0gRk9WIFN5c3RlbQpsb2NhbCBmdW5jdGlvbiB0b2dnbGVGb3YodmFsdWUpCglzZXR0aW5ncy5mb3ZFbmFibGVkID0gdmFsdWUKCWlmIHZhbHVlIHRoZW4KCQljYW1lcmEuRmllbGRPZlZpZXcgPSBzZXR0aW5ncy5jdXN0b21Gb3YKCWVsc2UKCQljYW1lcmEuRmllbGRPZlZpZXcgPSA3MAoJZW5kCmVuZAoKLS0gRmx5IFN5c3RlbSAoSW5maW5pdHkgWWllbGQgc3R5bGUpCmxvY2FsIGZseUNvbm5lY3Rpb24KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlRmx5KHZhbHVlKQoJc2V0dGluZ3MuZmx5RW5hYmxlZCA9IHZhbHVlCgoJaWYgdmFsdWUgdGhlbgoJCWxvY2FsIGZseVNwZWVkID0gc2V0dGluZ3MuZmx5U3BlZWQKCQlsb2NhbCB0b3JzbyA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgkJaWYgbm90IHRvcnNvIHRoZW4gcmV0dXJuIGVuZAoKCQlsb2NhbCBiZyA9IEluc3RhbmNlLm5ldygiQm9keUd5cm8iKQoJCWJnLlAgPSA5ZTQKCQliZy5tYXhUb3JxdWUgPSBWZWN0b3IzLm5ldyg5ZTksIDllOSwgOWU5KQoJCWJnLmNmcmFtZSA9IHRvcnNvLkNGcmFtZQoJCWJnLlBhcmVudCA9IHRvcnNvCgoJCWxvY2FsIGJ2ID0gSW5zdGFuY2UubmV3KCJCb2R5VmVsb2NpdHkiKQoJCWJ2LnZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoMCwgMCwgMCkKCQlidi5tYXhGb3JjZSA9IFZlY3RvcjMubmV3KDllOSwgOWU5LCA5ZTkpCgkJYnYuUGFyZW50ID0gdG9yc28KCgkJaWYgZmx5Q29ubmVjdGlvbiB0aGVuIGZseUNvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAoKCQlmbHlDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCWlmIG5vdCB0b3JzbyBvciBub3QgYmcgb3Igbm90IGJ2IHRoZW4gCgkJCQlpZiBmbHlDb25uZWN0aW9uIHRoZW4gZmx5Q29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCgkJCQlyZXR1cm4gCgkJCWVuZAoKCQkJbG9jYWwgY2FtID0gV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKCQkJbG9jYWwgbW92ZVZlYyA9IFZlY3RvcjMubmV3KCkKCgkJCWlmIFVzZXJJbnB1dFNlcnZpY2U6SXNLZXlEb3duKEVudW0uS2V5Q29kZS5XKSB0aGVuCgkJCQltb3ZlVmVjID0gbW92ZVZlYyArIChjYW0uQ0ZyYW1lLkxvb2tWZWN0b3IgKiBmbHlTcGVlZCkKCQkJZW5kCgkJCWlmIFVzZXJJbnB1dFNlcnZpY2U6SXNLZXlEb3duKEVudW0uS2V5Q29kZS5TKSB0aGVuCgkJCQltb3ZlVmVjID0gbW92ZVZlYyAtIChjYW0uQ0ZyYW1lLkxvb2tWZWN0b3IgKiBmbHlTcGVlZCkKCQkJZW5kCgkJCWlmIFVzZXJJbnB1dFNlcnZpY2U6SXNLZXlEb3duKEVudW0uS2V5Q29kZS5EKSB0aGVuCgkJCQltb3ZlVmVjID0gbW92ZVZlYyArIChjYW0uQ0ZyYW1lLlJpZ2h0VmVjdG9yICogZmx5U3BlZWQpCgkJCWVuZAoJCQlpZiBVc2VySW5wdXRTZXJ2aWNlOklzS2V5RG93bihFbnVtLktleUNvZGUuQSkgdGhlbgoJCQkJbW92ZVZlYyA9IG1vdmVWZWMgLSAoY2FtLkNGcmFtZS5SaWdodFZlY3RvciAqIGZseVNwZWVkKQoJCQllbmQKCQkJaWYgVXNlcklucHV0U2VydmljZTpJc0tleURvd24oRW51bS5LZXlDb2RlLlNwYWNlKSB0aGVuCgkJCQltb3ZlVmVjID0gbW92ZVZlYyArIFZlY3RvcjMubmV3KDAsIGZseVNwZWVkLCAwKQoJCQllbmQKCQkJaWYgVXNlcklucHV0U2VydmljZTpJc0tleURvd24oRW51bS5LZXlDb2RlLkxlZnRTaGlmdCkgdGhlbgoJCQkJbW92ZVZlYyA9IG1vdmVWZWMgLSBWZWN0b3IzLm5ldygwLCBmbHlTcGVlZCwgMCkKCQkJZW5kCgoJCQliZy5jZnJhbWUgPSBjYW0uQ0ZyYW1lCgkJCWJ2LnZlbG9jaXR5ID0gbW92ZVZlYwoJCWVuZCkKCWVsc2UKCQlpZiBmbHlDb25uZWN0aW9uIHRoZW4KCQkJZmx5Q29ubmVjdGlvbjpEaXNjb25uZWN0KCkKCQkJZmx5Q29ubmVjdGlvbiA9IG5pbAoJCWVuZAoKCQlsb2NhbCB0b3JzbyA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgkJaWYgdG9yc28gdGhlbgoJCQlmb3IgXywgdiBpbiBwYWlycyh0b3JzbzpHZXRDaGlsZHJlbigpKSBkbwoJCQkJaWYgdjpJc0EoIkJvZHlHeXJvIikgb3IgdjpJc0EoIkJvZHlWZWxvY2l0eSIpIHRoZW4KCQkJCQl2OkRlc3Ryb3koKQoJCQkJZW5kCgkJCWVuZAoJCWVuZAoJZW5kCmVuZAoKLS0gTm9jbGlwIFN5c3RlbQpsb2NhbCBmdW5jdGlvbiB0b2dnbGVOb2NsaXAodmFsdWUpCglzZXR0aW5ncy5ub2NsaXBFbmFibGVkID0gdmFsdWUKCglpZiB2YWx1ZSB0aGVuCgkJaWYgbm9jbGlwQ29ubmVjdGlvbiB0aGVuIG5vY2xpcENvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAoKCQlub2NsaXBDb25uZWN0aW9uID0gUnVuU2VydmljZS5TdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQlpZiBjaGFyYWN0ZXIgdGhlbgoJCQkJZm9yIF8sIHBhcnQgaW4gaXBhaXJzKGNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwoJCQkJCWlmIHBhcnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4KCQkJCQkJcGFydC5DYW5Db2xsaWRlID0gZmFsc2UKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQpCgllbHNlCgkJaWYgbm9jbGlwQ29ubmVjdGlvbiB0aGVuCgkJCW5vY2xpcENvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJCW5vY2xpcENvbm5lY3Rpb24gPSBuaWwKCQllbmQKCgkJaWYgY2hhcmFjdGVyIHRoZW4KCQkJZm9yIF8sIHBhcnQgaW4gaXBhaXJzKGNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwoJCQkJaWYgcGFydDpJc0EoIkJhc2VQYXJ0IikgdGhlbgoJCQkJCXBhcnQuQ2FuQ29sbGlkZSA9IHRydWUKCQkJCWVuZAoJCQllbmQKCQllbmQKCWVuZAplbmQKCi0tIEZyZWV6ZSBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlRnJlZXplKHZhbHVlKQoJc2V0dGluZ3MuZnJlZXplRW5hYmxlZCA9IHZhbHVlCgoJaWYgdmFsdWUgdGhlbgoJCWlmIGZyZWV6ZUNvbm5lY3Rpb24gdGhlbiBmcmVlemVDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKSBlbmQKCgkJaHVtYW5vaWQ6U2V0U3RhdGVFbmFibGVkKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUnVubmluZywgZmFsc2UpCgkJaHVtYW5vaWQ6U2V0U3RhdGVFbmFibGVkKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUnVubmluZ05vUGh5c2ljcywgZmFsc2UpCgoJCWZyZWV6ZUNvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJaWYgY2hhcmFjdGVyIHRoZW4KCQkJCWxvY2FsIHJvb3QgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQoJCQkJaWYgcm9vdCB0aGVuCgkJCQkJcm9vdC5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KCkKCQkJCQlyb290LkFzc2VtYmx5TGluZWFyVmVsb2NpdHkgPSBWZWN0b3IzLm5ldygpCgkJCQkJcm9vdC5Sb3RWZWxvY2l0eSA9IFZlY3RvcjMubmV3KCkKCQkJCQlyb290LkFzc2VtYmx5QW5ndWxhclZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoKQoJCQkJCXJvb3QuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhyb290LlBvc2l0aW9uKQoKCQkJCQlpZiBodW1hbm9pZDpHZXRTdGF0ZSgpID09IEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUnVubmluZyB0aGVuCgkJCQkJCWh1bWFub2lkOkNoYW5nZVN0YXRlKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUGh5c2ljcykKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQpCgoJCVVzZXJJbnB1dFNlcnZpY2UuTW92ZVJlcXVlc3Q6Q29ubmVjdChmdW5jdGlvbigpCgkJCXJldHVybiBFbnVtLlBsYXllckFjdGlvbnMuVW5rbm93bgoJCWVuZCkKCgllbHNlCgkJaWYgZnJlZXplQ29ubmVjdGlvbiB0aGVuCgkJCWZyZWV6ZUNvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJCWZyZWV6ZUNvbm5lY3Rpb24gPSBuaWwKCQllbmQKCgkJaHVtYW5vaWQ6U2V0U3RhdGVFbmFibGVkKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUnVubmluZywgdHJ1ZSkKCQlodW1hbm9pZDpTZXRTdGF0ZUVuYWJsZWQoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5SdW5uaW5nTm9QaHlzaWNzLCB0cnVlKQoKCQlpZiBodW1hbm9pZDpHZXRTdGF0ZSgpID09IEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUGh5c2ljcyB0aGVuCgkJCWh1bWFub2lkOkNoYW5nZVN0YXRlKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUnVubmluZykKCQllbmQKCWVuZAplbmQKCi0tIFN3aW0gU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZVN3aW0odmFsdWUpCglzZXR0aW5ncy5zd2ltRW5hYmxlZCA9IHZhbHVlCgoJaWYgdmFsdWUgdGhlbgoJCWlmIHN3aW1Db25uZWN0aW9uIHRoZW4gc3dpbUNvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAoKCQlzd2ltQ29ubmVjdGlvbiA9IFJ1blNlcnZpY2UuSGVhcnRiZWF0OkNvbm5lY3QoZnVuY3Rpb24oKQoJCQlpZiBjaGFyYWN0ZXIgYW5kIGh1bWFub2lkIHRoZW4KCQkJCWh1bWFub2lkOlNldFN0YXRlRW5hYmxlZChFbnVtLkh1bWFub2lkU3RhdGVUeXBlLlN3aW1taW5nLCB0cnVlKQoJCQkJaHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5Td2ltbWluZykKCQkJZW5kCgkJZW5kKQoJZWxzZQoJCWlmIHN3aW1Db25uZWN0aW9uIHRoZW4KCQkJc3dpbUNvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJCXN3aW1Db25uZWN0aW9uID0gbmlsCgkJZW5kCgkJaWYgaHVtYW5vaWQgdGhlbgoJCQlodW1hbm9pZDpTZXRTdGF0ZUVuYWJsZWQoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5Td2ltbWluZywgZmFsc2UpCgkJZW5kCgllbmQKZW5kCgotLSBTcGFtIFN5c3RlbQpsb2NhbCBmdW5jdGlvbiB0b2dnbGVTcGFtKHZhbHVlKQoJc2V0dGluZ3Muc3BhbUVuYWJsZWQgPSB2YWx1ZQoKCWlmIHZhbHVlIHRoZW4KCQlpZiBzcGFtQ29ubmVjdGlvbiB0aGVuIHNwYW1Db25uZWN0aW9uOkRpc2Nvbm5lY3QoKSBlbmQKCgkJc3BhbUNvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJaWYgb3MuY2xvY2soKSAlIHNldHRpbmdzLnNwYW1EZWxheSA8IDAuMSB0aGVuCgkJCQlsb2NhbCBjaGF0UmVtb3RlID0gUmVwbGljYXRlZFN0b3JhZ2U6RmluZEZpcnN0Q2hpbGQoIkRlZmF1bHRDaGF0U3lzdGVtQ2hhdEV2ZW50cyIpIGFuZCAKCQkJCQlSZXBsaWNhdGVkU3RvcmFnZS5EZWZhdWx0Q2hhdFN5c3RlbUNoYXRFdmVudHM6RmluZEZpcnN0Q2hpbGQoIlNheU1lc3NhZ2VSZXF1ZXN0IikKCgkJCQlpZiBjaGF0UmVtb3RlIHRoZW4KCQkJCQljaGF0UmVtb3RlOkZpcmVTZXJ2ZXIoc2V0dGluZ3Muc3BhbU1lc3NhZ2UsICJBbGwiKQoJCQkJZW5kCgkJCWVuZAoJCWVuZCkKCWVsc2UKCQlpZiBzcGFtQ29ubmVjdGlvbiB0aGVuCgkJCXNwYW1Db25uZWN0aW9uOkRpc2Nvbm5lY3QoKQoJCQlzcGFtQ29ubmVjdGlvbiA9IG5pbAoJCWVuZAoJZW5kCmVuZAoKLS0gRmlyZSBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlRmlyZSh2YWx1ZSkKCXNldHRpbmdzLmZpcmVFbmFibGVkID0gdmFsdWUKCglpZiB2YWx1ZSB0aGVuCgkJZm9yIF8sIHBhcnQgaW4gaXBhaXJzKGNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwoJCQlpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcGFydC5OYW1lIH49ICJIdW1hbm9pZFJvb3RQYXJ0IiB0aGVuCgkJCQlsb2NhbCBmaXJlID0gSW5zdGFuY2UubmV3KCJGaXJlIikKCQkJCWZpcmUuQ29sb3IgPSBzZXR0aW5ncy5maXJlQ29sb3IKCQkJCWZpcmUuU2Vjb25kYXJ5Q29sb3IgPSBDb2xvcjMubmV3KDEsIDAuNSwgMCkKCQkJCWZpcmUuU2l6ZSA9IDUKCQkJCWZpcmUuSGVhdCA9IDEwCgkJCQlmaXJlLlBhcmVudCA9IHBhcnQKCQkJCWZpcmVQYXJ0c1twYXJ0XSA9IGZpcmUKCQkJZW5kCgkJZW5kCgoJCWZpcmVDb25uZWN0aW9ucy5jaGFyYWN0ZXJBZGRlZCA9IGNoYXJhY3Rlci5EZXNjZW5kYW50QWRkZWQ6Q29ubmVjdChmdW5jdGlvbihwYXJ0KQoJCQlpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcGFydC5OYW1lIH49ICJIdW1hbm9pZFJvb3RQYXJ0IiB0aGVuCgkJCQlsb2NhbCBmaXJlID0gSW5zdGFuY2UubmV3KCJGaXJlIikKCQkJCWZpcmUuQ29sb3IgPSBzZXR0aW5ncy5maXJlQ29sb3IKCQkJCWZpcmUuU2Vjb25kYXJ5Q29sb3IgPSBDb2xvcjMubmV3KDEsIDAuNSwgMCkKCQkJCWZpcmUuU2l6ZSA9IDUKCQkJCWZpcmUuSGVhdCA9IDEwCgkJCQlmaXJlLlBhcmVudCA9IHBhcnQKCQkJCWZpcmVQYXJ0c1twYXJ0XSA9IGZpcmUKCQkJZW5kCgkJZW5kKQoJZWxzZQoJCWZvciBwYXJ0LCBmaXJlIGluIHBhaXJzKGZpcmVQYXJ0cykgZG8KCQkJZmlyZTpEZXN0cm95KCkKCQkJZmlyZVBhcnRzW3BhcnRdID0gbmlsCgkJZW5kCgoJCWZvciBfLCBjb25uZWN0aW9uIGluIHBhaXJzKGZpcmVDb25uZWN0aW9ucykgZG8KCQkJY29ubmVjdGlvbjpEaXNjb25uZWN0KCkKCQllbmQKCQlmaXJlQ29ubmVjdGlvbnMgPSB7fQoJZW5kCmVuZAoKLS0gRGlzY28gTW9kZSBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlRGlzY28odmFsdWUpCglzZXR0aW5ncy5kaXNjb0VuYWJsZWQgPSB2YWx1ZQoKCWlmIHZhbHVlIHRoZW4KCQlvcmlnaW5hbENvbG9ycyA9IHt9CgkJZGlzY29Db25uZWN0aW9ucyA9IHt9CgoJCWxvY2FsIGRpc2NvQmFsbCA9IEluc3RhbmNlLm5ldygiUGFydCIpCgkJZGlzY29CYWxsLk5hbWUgPSAiRGlzY29CYWxsIgoJCWRpc2NvQmFsbC5TaGFwZSA9IEVudW0uUGFydFR5cGUuQmFsbAoJCWRpc2NvQmFsbC5TaXplID0gVmVjdG9yMy5uZXcoMywgMywgMykKCQlkaXNjb0JhbGwuUG9zaXRpb24gPSBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikuUG9zaXRpb24gKyBWZWN0b3IzLm5ldygwLCA1LCAwKQoJCWRpc2NvQmFsbC5BbmNob3JlZCA9IHRydWUKCQlkaXNjb0JhbGwuQ2FuQ29sbGlkZSA9IGZhbHNlCgkJZGlzY29CYWxsLk1hdGVyaWFsID0gRW51bS5NYXRlcmlhbC5OZW9uCgkJZGlzY29CYWxsLlBhcmVudCA9IFdvcmtzcGFjZQoKCQlsb2NhbCBwb2ludExpZ2h0ID0gSW5zdGFuY2UubmV3KCJQb2ludExpZ2h0IikKCQlwb2ludExpZ2h0LkJyaWdodG5lc3MgPSA1CgkJcG9pbnRMaWdodC5SYW5nZSA9IDIwCgkJcG9pbnRMaWdodC5QYXJlbnQgPSBkaXNjb0JhbGwKCgkJZGlzY29Db25uZWN0aW9ucy5oZWFydGJlYXQgPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKGR0KQoJCQlkaXNjb0JhbGwuQ0ZyYW1lID0gZGlzY29CYWxsLkNGcmFtZSAqIENGcmFtZS5BbmdsZXMoMCwgbWF0aC5yYWQoNjAgKiBkdCksIDApCgoJCQlsb2NhbCBodWUgPSB0aWNrKCkgJSA1IC8gNQoJCQlsb2NhbCBjb2xvciA9IENvbG9yMy5mcm9tSFNWKGh1ZSwgMSwgMSkKCQkJZGlzY29CYWxsLkNvbG9yID0gY29sb3IKCQkJcG9pbnRMaWdodC5Db2xvciA9IGNvbG9yCgoJCQlmb3IgXywgcGFydCBpbiBpcGFpcnMoY2hhcmFjdGVyOkdldERlc2NlbmRhbnRzKCkpIGRvCgkJCQlpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcGFydC5OYW1lIH49ICJIdW1hbm9pZFJvb3RQYXJ0IiB0aGVuCgkJCQkJaWYgbm90IG9yaWdpbmFsQ29sb3JzW3BhcnRdIHRoZW4KCQkJCQkJb3JpZ2luYWxDb2xvcnNbcGFydF0gPSB7CgkJCQkJCQljb2xvciA9IHBhcnQuQ29sb3IsCgkJCQkJCQltYXRlcmlhbCA9IHBhcnQuTWF0ZXJpYWwKCQkJCQkJfQoJCQkJCWVuZAoJCQkJCXBhcnQuQ29sb3IgPSBDb2xvcjMuZnJvbUhTVigoaHVlICsgcGFydC5OYW1lOmxlbigpLzUwKSAlIDEsIDEsIDEpCgkJCQkJcGFydC5NYXRlcmlhbCA9IEVudW0uTWF0ZXJpYWwuTmVvbgoJCQkJZW5kCgkJCWVuZAoJCWVuZCkKCgkJZGlzY29Db25uZWN0aW9ucy5jaGFyYWN0ZXJBZGRlZCA9IGNoYXJhY3Rlci5EZXNjZW5kYW50QWRkZWQ6Q29ubmVjdChmdW5jdGlvbihwYXJ0KQoJCQlpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcGFydC5OYW1lIH49ICJIdW1hbm9pZFJvb3RQYXJ0IiB0aGVuCgkJCQlvcmlnaW5hbENvbG9yc1twYXJ0XSA9IHsKCQkJCQljb2xvciA9IHBhcnQuQ29sb3IsCgkJCQkJbWF0ZXJpYWwgPSBwYXJ0Lk1hdGVyaWFsCgkJCQl9CgkJCWVuZAoJCWVuZCkKCgllbHNlCgkJZm9yIHBhcnQsIGRhdGEgaW4gcGFpcnMob3JpZ2luYWxDb2xvcnMpIGRvCgkJCWlmIHBhcnQgYW5kIHBhcnQuUGFyZW50IHRoZW4KCQkJCXBhcnQuQ29sb3IgPSBkYXRhLmNvbG9yCgkJCQlwYXJ0Lk1hdGVyaWFsID0gZGF0YS5tYXRlcmlhbAoJCQllbmQKCQllbmQKCQlvcmlnaW5hbENvbG9ycyA9IHt9CgoJCWlmIFdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgiRGlzY29CYWxsIikgdGhlbgoJCQlXb3Jrc3BhY2UuRGlzY29CYWxsOkRlc3Ryb3koKQoJCWVuZAoKCQlmb3IgXywgY29ubmVjdGlvbiBpbiBwYWlycyhkaXNjb0Nvbm5lY3Rpb25zKSBkbwoJCQljb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQoJCWVuZAoJCWRpc2NvQ29ubmVjdGlvbnMgPSB7fQoJZW5kCmVuZAoKLS0gQ2hhbXMgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIGFwcGx5Q2hhbXMocGxheWVyTW9kZWwpCglpZiBub3QgcGxheWVyTW9kZWwgb3Igbm90IHBsYXllck1vZGVsOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKSBvciBwbGF5ZXJNb2RlbCA9PSBjaGFyYWN0ZXIgdGhlbgoJCXJldHVybgoJZW5kCgoJaWYgY2hhbXNJbnN0YW5jZXNbcGxheWVyTW9kZWxdIHRoZW4KCQlmb3IgXywgaW5zdGFuY2UgaW4gcGFpcnMoY2hhbXNJbnN0YW5jZXNbcGxheWVyTW9kZWxdKSBkbwoJCQlpbnN0YW5jZTpEZXN0cm95KCkKCQllbmQKCWVuZAoKCWNoYW1zSW5zdGFuY2VzW3BsYXllck1vZGVsXSA9IHt9CgoJaWYgc2V0dGluZ3MuY2hhbXNFbmFibGVkIHRoZW4KCQlsb2NhbCB0ZWFtQ2hlY2tQYXNzZWQgPSB0cnVlCgkJaWYgc2V0dGluZ3MuY2hhbXNUZWFtQ2hlY2sgYW5kIHBsYXllck1vZGVsOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKSB0aGVuCgkJCWxvY2FsIHBsYXllciA9IFBsYXllcnM6R2V0UGxheWVyRnJvbUNoYXJhY3RlcihwbGF5ZXJNb2RlbCkKCQkJaWYgcGxheWVyIGFuZCBwbGF5ZXIuVGVhbSA9PSBwbGF5ZXIuVGVhbSB0aGVuCgkJCQl0ZWFtQ2hlY2tQYXNzZWQgPSBmYWxzZQoJCQllbmQKCQllbmQKCgkJaWYgdGVhbUNoZWNrUGFzc2VkIHRoZW4KCQkJZm9yIF8sIHBhcnQgaW4gaXBhaXJzKHBsYXllck1vZGVsOkdldERlc2NlbmRhbnRzKCkpIGRvCgkJCQlpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcGFydC5OYW1lIH49ICJIdW1hbm9pZFJvb3RQYXJ0IiB0aGVuCgkJCQkJaWYgc2V0dGluZ3MuY2hhbXNGaWxsIHRoZW4KCQkJCQkJbG9jYWwgZmlsbCA9IEluc3RhbmNlLm5ldygiQm94SGFuZGxlQWRvcm5tZW50IikKCQkJCQkJZmlsbC5OYW1lID0gIkNoYW1zRmlsbCIKCQkJCQkJZmlsbC5BZG9ybmVlID0gcGFydAoJCQkJCQlmaWxsLkFsd2F5c09uVG9wID0gdHJ1ZQoJCQkJCQlmaWxsLlpJbmRleCA9IDEKCQkJCQkJZmlsbC5TaXplID0gcGFydC5TaXplICogMS4wNQoJCQkJCQlmaWxsLlRyYW5zcGFyZW5jeSA9IHNldHRpbmdzLmNoYW1zVHJhbnNwYXJlbmN5CgkJCQkJCWZpbGwuQ29sb3IzID0gc2V0dGluZ3MuY2hhbXNGaWxsQ29sb3IKCQkJCQkJZmlsbC5QYXJlbnQgPSBwYXJ0CgkJCQkJCXRhYmxlLmluc2VydChjaGFtc0luc3RhbmNlc1twbGF5ZXJNb2RlbF0sIGZpbGwpCgkJCQkJZW5kCgoJCQkJCWlmIHNldHRpbmdzLmNoYW1zT3V0bGluZSB0aGVuCgkJCQkJCWxvY2FsIG91dGxpbmUgPSBJbnN0YW5jZS5uZXcoIkJveEhhbmRsZUFkb3JubWVudCIpCgkJCQkJCW91dGxpbmUuTmFtZSA9ICJDaGFtc091dGxpbmUiCgkJCQkJCW91dGxpbmUuQWRvcm5lZSA9IHBhcnQKCQkJCQkJb3V0bGluZS5BbHdheXNPblRvcCA9IHRydWUKCQkJCQkJb3V0bGluZS5aSW5kZXggPSAyCgkJCQkJCW91dGxpbmUuU2l6ZSA9IHBhcnQuU2l6ZSAqIDEuMQoJCQkJCQlvdXRsaW5lLlRyYW5zcGFyZW5jeSA9IDAKCQkJCQkJb3V0bGluZS5Db2xvcjMgPSBzZXR0aW5ncy5jaGFtc091dGxpbmVDb2xvcgoJCQkJCQlvdXRsaW5lLlBhcmVudCA9IHBhcnQKCQkJCQkJdGFibGUuaW5zZXJ0KGNoYW1zSW5zdGFuY2VzW3BsYXllck1vZGVsXSwgb3V0bGluZSkKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQKCWVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUNoYW1zKHZhbHVlKQoJc2V0dGluZ3MuY2hhbXNFbmFibGVkID0gdmFsdWUKCglpZiB2YWx1ZSB0aGVuCgkJZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCgkJCWlmIHBsYXllciB+PSBwbGF5ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXIgdGhlbgoJCQkJYXBwbHlDaGFtcyhwbGF5ZXIuQ2hhcmFjdGVyKQoJCQllbmQKCQllbmQKCgkJY2hhbXNDb25uZWN0aW9ucy5wbGF5ZXJBZGRlZCA9IFBsYXllcnMuUGxheWVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihwbGF5ZXIpCgkJCXBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGNoYXJhY3RlcikKCQkJCWFwcGx5Q2hhbXMoY2hhcmFjdGVyKQoJCQllbmQpCgkJZW5kKQoKCQlmb3IgXywgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KCQkJaWYgcGxheWVyIH49IHBsYXllciB0aGVuCgkJCQljaGFtc0Nvbm5lY3Rpb25zWyJjaGFyYWN0ZXJBZGRlZF8iLi5wbGF5ZXIuVXNlcklkXSA9IHBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGNoYXJhY3RlcikKCQkJCQlhcHBseUNoYW1zKGNoYXJhY3RlcikKCQkJCWVuZCkKCQkJZW5kCgkJZW5kCgllbHNlCgkJZm9yIF8sIGluc3RhbmNlcyBpbiBwYWlycyhjaGFtc0luc3RhbmNlcykgZG8KCQkJZm9yIF8sIGluc3RhbmNlIGluIGlwYWlycyhpbnN0YW5jZXMpIGRvCgkJCQlpbnN0YW5jZTpEZXN0cm95KCkKCQkJZW5kCgkJZW5kCgkJY2hhbXNJbnN0YW5jZXMgPSB7fQoKCQlmb3IgXywgY29ubmVjdGlvbiBpbiBwYWlycyhjaGFtc0Nvbm5lY3Rpb25zKSBkbwoJCQljb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQoJCWVuZAoJCWNoYW1zQ29ubmVjdGlvbnMgPSB7fQoJZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gdXBkYXRlQ2hhbXNTZXR0aW5ncygpCglpZiBzZXR0aW5ncy5jaGFtc0VuYWJsZWQgdGhlbgoJCXRvZ2dsZUNoYW1zKGZhbHNlKQoJCXRvZ2dsZUNoYW1zKHRydWUpCgllbmQKZW5kCgotLSBHb2QgTW9kZSBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlR29kTW9kZSh2YWx1ZSkKCXNldHRpbmdzLmdvZE1vZGVFbmFibGVkID0gdmFsdWUKCWxvY2FsIEdPRF9NT0RFX0hQID0gMTAwMDAwMAoKCWlmIHZhbHVlIHRoZW4KCQlpZiBnb2RNb2RlQ29ubmVjdGlvbiB0aGVuIGdvZE1vZGVDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKSBlbmQKCgkJaHVtYW5vaWQuTWF4SGVhbHRoID0gR09EX01PREVfSFAKCQlodW1hbm9pZC5IZWFsdGggPSBHT0RfTU9ERV9IUAoKCQlnb2RNb2RlQ29ubmVjdGlvbiA9IGh1bWFub2lkLkhlYWx0aENoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihuZXdIZWFsdGgpCgkJCWlmIG5ld0hlYWx0aCA8IEdPRF9NT0RFX0hQIHRoZW4KCQkJCWh1bWFub2lkLkhlYWx0aCA9IEdPRF9NT0RFX0hQCgoJCQkJbG9jYWwgcm9vdCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgkJCQlpZiByb290IHRoZW4KCQkJCQlsb2NhbCBoZWFsRWZmZWN0ID0gSW5zdGFuY2UubmV3KCJQYXJ0aWNsZUVtaXR0ZXIiKQoJCQkJCWhlYWxFZmZlY3QuTGlnaHRFbWlzc2lvbiA9IDEKCQkJCQloZWFsRWZmZWN0LlRleHR1cmUgPSAicmJ4YXNzZXRpZDovLzI0MjQ4Nzk4NyIKCQkJCQloZWFsRWZmZWN0LkNvbG9yID0gQ29sb3JTZXF1ZW5jZS5uZXcoQ29sb3IzLm5ldygwLCAxLCAwKSkKCQkJCQloZWFsRWZmZWN0LlNpemUgPSBOdW1iZXJTZXF1ZW5jZS5uZXcoMC41KQoJCQkJCWhlYWxFZmZlY3QuTGlmZXRpbWUgPSBOdW1iZXJSYW5nZS5uZXcoMC41KQoJCQkJCWhlYWxFZmZlY3QuU3BlZWQgPSBOdW1iZXJSYW5nZS5uZXcoMikKCQkJCQloZWFsRWZmZWN0LkVtaXNzaW9uRGlyZWN0aW9uID0gRW51bS5Ob3JtYWxJZC5Ub3AKCQkJCQloZWFsRWZmZWN0LlBhcmVudCA9IHJvb3QKCQkJCQlEZWJyaXM6QWRkSXRlbShoZWFsRWZmZWN0LCAwLjUpCgkJCQllbmQKCQkJZW5kCgkJZW5kKQoKCQlodW1hbm9pZDpTZXRTdGF0ZUVuYWJsZWQoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5EZWFkLCBmYWxzZSkKCQlodW1hbm9pZDpTZXRTdGF0ZUVuYWJsZWQoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5GYWxsaW5nRG93biwgZmFsc2UpCgkJaHVtYW5vaWQ6U2V0U3RhdGVFbmFibGVkKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuUmFnZG9sbCwgZmFsc2UpCgoJZWxzZQoJCWlmIGdvZE1vZGVDb25uZWN0aW9uIHRoZW4KCQkJZ29kTW9kZUNvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJCWdvZE1vZGVDb25uZWN0aW9uID0gbmlsCgkJZW5kCgoJCWh1bWFub2lkLk1heEhlYWx0aCA9IDEwMAoJCWh1bWFub2lkLkhlYWx0aCA9IG1hdGgubWluKGh1bWFub2lkLkhlYWx0aCwgMTAwKQoKCQlodW1hbm9pZDpTZXRTdGF0ZUVuYWJsZWQoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5EZWFkLCB0cnVlKQoJCWh1bWFub2lkOlNldFN0YXRlRW5hYmxlZChFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkZhbGxpbmdEb3duLCB0cnVlKQoJCWh1bWFub2lkOlNldFN0YXRlRW5hYmxlZChFbnVtLkh1bWFub2lkU3RhdGVUeXBlLlJhZ2RvbGwsIHRydWUpCgllbmQKZW5kCgotLSBBdXRvIEZhcm0gZm9yIE11cmRlciBNeXN0ZXJ5IDIKbG9jYWwgZnVuY3Rpb24gdG9nZ2xlQXV0b0Zhcm0odmFsdWUpCglzZXR0aW5ncy5hdXRvRmFybUVuYWJsZWQgPSB2YWx1ZQoKCWlmIHZhbHVlIHRoZW4KCQlpZiBhdXRvRmFybUNvbm5lY3Rpb24gdGhlbiBhdXRvRmFybUNvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAoKCQlhdXRvRmFybUNvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJLS0gRmluZCB0aGUgbmVhcmVzdCBjb2luCgkJCWxvY2FsIG5lYXJlc3RDb2luID0gbmlsCgkJCWxvY2FsIG5lYXJlc3REaXN0YW5jZSA9IG1hdGguaHVnZQoJCQlsb2NhbCByb290ID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKCgkJCWlmIHJvb3QgdGhlbgoJCQkJZm9yIF8sIGNvaW4gaW4gaXBhaXJzKFdvcmtzcGFjZTpHZXRDaGlsZHJlbigpKSBkbwoJCQkJCWlmIGNvaW4uTmFtZSA9PSAiQ29pbiIgYW5kIGNvaW46RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJUb3VjaFRyYW5zbWl0dGVyIikgdGhlbgoJCQkJCQlsb2NhbCBkaXN0YW5jZSA9IChjb2luLlBvc2l0aW9uIC0gcm9vdC5Qb3NpdGlvbikuTWFnbml0dWRlCgkJCQkJCWlmIGRpc3RhbmNlIDwgbmVhcmVzdERpc3RhbmNlIHRoZW4KCQkJCQkJCW5lYXJlc3REaXN0YW5jZSA9IGRpc3RhbmNlCgkJCQkJCQluZWFyZXN0Q29pbiA9IGNvaW4KCQkJCQkJZW5kCgkJCQkJZW5kCgkJCQllbmQKCgkJCQktLSBNb3ZlIHRvIHRoZSBuZWFyZXN0IGNvaW4KCQkJCWlmIG5lYXJlc3RDb2luIHRoZW4KCQkJCQlodW1hbm9pZDpNb3ZlVG8obmVhcmVzdENvaW4uUG9zaXRpb24pCgkJCQllbmQKCQkJZW5kCgkJZW5kKQoJZWxzZQoJCWlmIGF1dG9GYXJtQ29ubmVjdGlvbiB0aGVuCgkJCWF1dG9GYXJtQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkKCQkJYXV0b0Zhcm1Db25uZWN0aW9uID0gbmlsCgkJZW5kCgllbmQKZW5kCgotLSBGYWtlIExhZyBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlRmFrZUxhZyh2YWx1ZSkKCXNldHRpbmdzLmZha2VMYWdFbmFibGVkID0gdmFsdWUKCglpZiB2YWx1ZSB0aGVuCgkJaWYgZmFrZUxhZ0Nvbm5lY3Rpb24gdGhlbiBmYWtlTGFnQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCgoJCWZha2VMYWdDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCXdhaXQoc2V0dGluZ3MuZmFrZUxhZ0Ftb3VudCkKCQllbmQpCgllbHNlCgkJaWYgZmFrZUxhZ0Nvbm5lY3Rpb24gdGhlbgoJCQlmYWtlTGFnQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkKCQkJZmFrZUxhZ0Nvbm5lY3Rpb24gPSBuaWwKCQllbmQKCWVuZAplbmQKCi0tIEludmlzaWJsZSBQbGF5ZXIgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUludmlzaWJsZSh2YWx1ZSkKCXNldHRpbmdzLmludmlzaWJsZUVuYWJsZWQgPSB2YWx1ZQoKCWlmIHZhbHVlIHRoZW4KCQlmb3IgXywgcGFydCBpbiBpcGFpcnMoY2hhcmFjdGVyOkdldERlc2NlbmRhbnRzKCkpIGRvCgkJCWlmIHBhcnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4KCQkJCWludmlzaWJsZVBhcnRzW3BhcnRdID0gcGFydC5UcmFuc3BhcmVuY3kKCQkJCXBhcnQuVHJhbnNwYXJlbmN5ID0gMQoJCQllbHNlaWYgcGFydDpJc0EoIkRlY2FsIikgdGhlbgoJCQkJaW52aXNpYmxlUGFydHNbcGFydF0gPSBwYXJ0LlRyYW5zcGFyZW5jeQoJCQkJcGFydC5UcmFuc3BhcmVuY3kgPSAxCgkJCWVuZAoJCWVuZAoJZWxzZQoJCWZvciBwYXJ0LCB0cmFuc3BhcmVuY3kgaW4gcGFpcnMoaW52aXNpYmxlUGFydHMpIGRvCgkJCWlmIHBhcnQgYW5kIHBhcnQuUGFyZW50IHRoZW4KCQkJCXBhcnQuVHJhbnNwYXJlbmN5ID0gdHJhbnNwYXJlbmN5CgkJCWVuZAoJCWVuZAoJCWludmlzaWJsZVBhcnRzID0ge30KCWVuZAplbmQKCi0tIEJ1bm55IEhvcCBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlQmhvcCh2YWx1ZSkKCXNldHRpbmdzLmJob3BFbmFibGVkID0gdmFsdWUKCglpZiB2YWx1ZSB0aGVuCgkJaWYgYmhvcENvbm5lY3Rpb24gdGhlbiBiaG9wQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCgoJCWJob3BDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCWlmIGh1bWFub2lkLkZsb29yTWF0ZXJpYWwgfj0gRW51bS5NYXRlcmlhbC5BaXIgdGhlbgoJCQkJaHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5KdW1waW5nKQoJCQllbmQKCQllbmQpCgllbHNlCgkJaWYgYmhvcENvbm5lY3Rpb24gdGhlbgoJCQliaG9wQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkKCQkJYmhvcENvbm5lY3Rpb24gPSBuaWwKCQllbmQKCWVuZAplbmQKCi0tIEluZmluaXRlIEp1bXAgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUluZmluaXRlSnVtcCh2YWx1ZSkKCXNldHRpbmdzLmluZmluaXRlSnVtcEVuYWJsZWQgPSB2YWx1ZQoKCWlmIHZhbHVlIHRoZW4KCQlpZiBpbmZpbml0ZUp1bXBDb25uZWN0aW9uIHRoZW4gaW5maW5pdGVKdW1wQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCgoJCWluZmluaXRlSnVtcENvbm5lY3Rpb24gPSBVc2VySW5wdXRTZXJ2aWNlLkp1bXBSZXF1ZXN0OkNvbm5lY3QoZnVuY3Rpb24oKQoJCQlodW1hbm9pZDpDaGFuZ2VTdGF0ZShFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkp1bXBpbmcpCgkJZW5kKQoJZWxzZQoJCWlmIGluZmluaXRlSnVtcENvbm5lY3Rpb24gdGhlbgoJCQlpbmZpbml0ZUp1bXBDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQoJCQlpbmZpbml0ZUp1bXBDb25uZWN0aW9uID0gbmlsCgkJZW5kCgllbmQKZW5kCgotLSBDcm9zc2hhaXIgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUNyb3NzaGFpcih2YWx1ZSkKCXNldHRpbmdzLmNyb3NzaGFpckVuYWJsZWQgPSB2YWx1ZQoJY3Jvc3NoYWlyRnJhbWUuVmlzaWJsZSA9IHZhbHVlCmVuZAoKLS0gVHJhY2VycyBTeXN0ZW0KbG9jYWwgZnVuY3Rpb24gdG9nZ2xlVHJhY2Vycyh2YWx1ZSkKCXNldHRpbmdzLnRyYWNlcnNFbmFibGVkID0gdmFsdWUKCglpZiB2YWx1ZSB0aGVuCgkJZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCgkJCWlmIHBsYXllciB+PSBwbGF5ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXIgdGhlbgoJCQkJY3JlYXRlVHJhY2VyKHBsYXllci5DaGFyYWN0ZXIpCgkJCWVuZAoJCWVuZAoKCQl0cmFjZXJDb25uZWN0aW9ucy5wbGF5ZXJBZGRlZCA9IFBsYXllcnMuUGxheWVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihwbGF5ZXIpCgkJCXBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGNoYXJhY3RlcikKCQkJCWNyZWF0ZVRyYWNlcihjaGFyYWN0ZXIpCgkJCWVuZCkKCQllbmQpCgllbHNlCgkJZm9yIF8sIGNvbm5lY3Rpb24gaW4gcGFpcnModHJhY2VyQ29ubmVjdGlvbnMpIGRvCgkJCWNvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJZW5kCgkJdHJhY2VyQ29ubmVjdGlvbnMgPSB7fQoJZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gY3JlYXRlVHJhY2VyKGNoYXJhY3RlcikKCWxvY2FsIHJvb3QgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQoJaWYgbm90IHJvb3QgdGhlbiByZXR1cm4gZW5kCgoJbG9jYWwgdHJhY2VyID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCgl0cmFjZXIuTmFtZSA9ICJUcmFjZXIiCgl0cmFjZXIuU2l6ZSA9IFVEaW0yLm5ldygwLCAyLCAwLCAyKQoJdHJhY2VyLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KDEsIDAsIDApCgl0cmFjZXIuQm9yZGVyU2l6ZVBpeGVsID0gMAoJdHJhY2VyLlBhcmVudCA9IGd1aQoKCXRyYWNlckNvbm5lY3Rpb25zWyJ0cmFjZXJfIi4uY2hhcmFjdGVyLk5hbWVdID0gUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQoJCWxvY2FsIHZlY3Rvciwgb25TY3JlZW4gPSBjYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQocm9vdC5Qb3NpdGlvbikKCQlpZiBvblNjcmVlbiB0aGVuCgkJCXRyYWNlci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCB2ZWN0b3IuWCwgMCwgdmVjdG9yLlkpCgkJCXRyYWNlci5WaXNpYmxlID0gdHJ1ZQoJCWVsc2UKCQkJdHJhY2VyLlZpc2libGUgPSBmYWxzZQoJCWVuZAoJZW5kKQplbmQKCi0tIEZ1bGxicmlnaHQgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUZ1bGxicmlnaHQodmFsdWUpCglzZXR0aW5ncy5mdWxsYnJpZ2h0RW5hYmxlZCA9IHZhbHVlCgoJaWYgdmFsdWUgdGhlbgoJCUxpZ2h0aW5nLkFtYmllbnQgPSBDb2xvcjMubmV3KDEsIDEsIDEpCgkJTGlnaHRpbmcuQnJpZ2h0bmVzcyA9IDEKCWVsc2UKCQlMaWdodGluZy5BbWJpZW50ID0gb3JpZ2luYWxMaWdodGluZy5BbWJpZW50CgkJTGlnaHRpbmcuQnJpZ2h0bmVzcyA9IG9yaWdpbmFsTGlnaHRpbmcuQnJpZ2h0bmVzcwoJZW5kCmVuZAoKLS0gTm8gRm9nIFN5c3RlbQpsb2NhbCBmdW5jdGlvbiB0b2dnbGVOb0ZvZyh2YWx1ZSkKCXNldHRpbmdzLm5vRm9nRW5hYmxlZCA9IHZhbHVlCgoJaWYgdmFsdWUgdGhlbgoJCUxpZ2h0aW5nLkZvZ0VuZCA9IDEwMDAwMDAKCWVsc2UKCQlMaWdodGluZy5Gb2dFbmQgPSBvcmlnaW5hbExpZ2h0aW5nLkZvZ0VuZAoJZW5kCmVuZAoKLS0gQW50aS1BRksgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUFudGlBZmsodmFsdWUpCglzZXR0aW5ncy5hbnRpQWZrRW5hYmxlZCA9IHZhbHVlCgoJaWYgdmFsdWUgdGhlbgoJCWlmIGFudGlBZmtDb25uZWN0aW9uIHRoZW4gYW50aUFma0Nvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAoKCQlhbnRpQWZrQ29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLklkbGVkOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQlWaXJ0dWFsSW5wdXRNYW5hZ2VyOlNlbmRLZXlFdmVudCh0cnVlLCBFbnVtLktleUNvZGUuU3BhY2UsIGZhbHNlLCBnYW1lKQoJCQl3YWl0KDAuMSkKCQkJVmlydHVhbElucHV0TWFuYWdlcjpTZW5kS2V5RXZlbnQoZmFsc2UsIEVudW0uS2V5Q29kZS5TcGFjZSwgZmFsc2UsIGdhbWUpCgkJZW5kKQoJZWxzZQoJCWlmIGFudGlBZmtDb25uZWN0aW9uIHRoZW4KCQkJYW50aUFma0Nvbm5lY3Rpb246RGlzY29ubmVjdCgpCgkJCWFudGlBZmtDb25uZWN0aW9uID0gbmlsCgkJZW5kCgllbmQKZW5kCgotLSBTcGluYm90IFN5c3RlbQpsb2NhbCBmdW5jdGlvbiB0b2dnbGVTcGluYm90KHZhbHVlKQoJc2V0dGluZ3Muc3BpbmJvdEVuYWJsZWQgPSB2YWx1ZQoKCWlmIHZhbHVlIHRoZW4KCQlpZiBzcGluYm90Q29ubmVjdGlvbiB0aGVuIHNwaW5ib3RDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKSBlbmQKCgkJbG9jYWwgcm9vdCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgkJaWYgbm90IHJvb3QgdGhlbiByZXR1cm4gZW5kCgoJCXNwaW5ib3RDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbihkdCkKCQkJaWYgcm9vdCB0aGVuCgkJCQlyb290LkNGcmFtZSA9IHJvb3QuQ0ZyYW1lICogQ0ZyYW1lLkFuZ2xlcygwLCBtYXRoLnJhZChzZXR0aW5ncy5zcGluYm90U3BlZWQgKiBkdCksIDApCgkJCWVuZAoJCWVuZCkKCWVsc2UKCQlpZiBzcGluYm90Q29ubmVjdGlvbiB0aGVuCgkJCXNwaW5ib3RDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQoJCQlzcGluYm90Q29ubmVjdGlvbiA9IG5pbAoJCWVuZAoJZW5kCmVuZAoKLS0gUGxheWVyIFRocm93IFN5c3RlbQpsb2NhbCBmdW5jdGlvbiB0aHJvd1BsYXllcigpCglpZiBub3Qgc2V0dGluZ3Muc2VsZWN0ZWRQbGF5ZXIgdGhlbiByZXR1cm4gZW5kCgoJbG9jYWwgdGFyZ2V0Q2hhciA9IHNldHRpbmdzLnNlbGVjdGVkUGxheWVyLkNoYXJhY3RlcgoJaWYgbm90IHRhcmdldENoYXIgdGhlbiByZXR1cm4gZW5kCgoJbG9jYWwgcm9vdCA9IHRhcmdldENoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQoJaWYgbm90IHJvb3QgdGhlbiByZXR1cm4gZW5kCgoJcm9vdC5DRnJhbWUgPSBDRnJhbWUubmV3KDAsIC0xMDAwMCwgMCkKZW5kCgotLSBUZWxlcG9ydCB0byBQbGF5ZXIgU3lzdGVtCmxvY2FsIGZ1bmN0aW9uIHRlbGVwb3J0VG9QbGF5ZXIoKQoJaWYgbm90IHNldHRpbmdzLnNlbGVjdGVkUGxheWVyIHRoZW4gcmV0dXJuIGVuZAoKCWxvY2FsIHRhcmdldENoYXIgPSBzZXR0aW5ncy5zZWxlY3RlZFBsYXllci5DaGFyYWN0ZXIKCWlmIG5vdCB0YXJnZXRDaGFyIHRoZW4gcmV0dXJuIGVuZAoKCWxvY2FsIHRhcmdldFJvb3QgPSB0YXJnZXRDaGFyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKCWlmIG5vdCB0YXJnZXRSb290IHRoZW4gcmV0dXJuIGVuZAoKCWxvY2FsIG15Um9vdCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCglpZiBub3QgbXlSb290IHRoZW4gcmV0dXJuIGVuZAoKCW15Um9vdC5DRnJhbWUgPSB0YXJnZXRSb290LkNGcmFtZSArIFZlY3RvcjMubmV3KDAsIDMsIDApCmVuZAoKLS0gUmVqb2luIFNlcnZlcgpsb2NhbCBmdW5jdGlvbiByZWpvaW5TZXJ2ZXIoKQoJVGVsZXBvcnRTZXJ2aWNlOlRlbGVwb3J0KGdhbWUuUGxhY2VJZCwgcGxheWVyKQplbmQKCi0tIFVwZGF0ZSB0YWJzIGNvbnRlbnQKbG9jYWwgZnVuY3Rpb24gdXBkYXRlVGFiKCkKCWZvciBfLCBjaGlsZCBpbiBpcGFpcnMoY29udGVudEZyYW1lOkdldENoaWxkcmVuKCkpIGRvCgkJY2hpbGQ6RGVzdHJveSgpCgllbmQKCglmb3IgbmFtZSwgYnV0dG9uIGluIHBhaXJzKHRhYkJ1dHRvbnMpIGRvCgkJYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBuYW1lID09IHNldHRpbmdzLmN1cnJlbnRUYWIgYW5kIHRoZW1lc1tzZXR0aW5ncy50aGVtZV0uYWN0aXZlVGFiQ29sb3Igb3IgdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5pbmFjdGl2ZVRhYkNvbG9yCgllbmQKCglpZiBzZXR0aW5ncy5jdXJyZW50VGFiID09ICJNYWluIiB0aGVuCgkJY3JlYXRlTGFiZWwoIk9wZW4gLyBDbG9zZSAgICBbUlNISUZUXSIsIFVEaW0yLm5ldygwLCAwLCAwLCAwKSkKCgkJY3JlYXRlQnV0dG9uKCJLZXliaW5kcyIsIFVEaW0yLm5ldygwLCAwLCAwLCAyMCksIGZ1bmN0aW9uKCkKCQkJc2V0dGluZ3MuY3VycmVudFRhYiA9ICJDb25maWciCgkJCXVwZGF0ZVRhYigpCgkJZW5kKQoKCQljcmVhdGVCdXR0b24oIlJlam9pbiBTZXJ2ZXIiLCBVRGltMi5uZXcoMCwgMCwgMCwgNDApLCBmdW5jdGlvbigpCgkJCXJlam9pblNlcnZlcigpCgkJZW5kKQoKCQljcmVhdGVCdXR0b24oIlVubG9hZCIsIFVEaW0yLm5ldygwLCAwLCAwLCA2MCksIGZ1bmN0aW9uKCkKCQkJZ3VpOkRlc3Ryb3koKQoJCWVuZCkKCgkJY3JlYXRlTGFiZWwoIldhdGVybWFyayIsIFVEaW0yLm5ldygwLCAwLCAwLCA5MCkpCgkJbG9jYWwgd21Ub2dnbGUgPSBjcmVhdGVUb2dnbGUoIkVuYWJsZWQiLCBVRGltMi5uZXcoMCwgMCwgMCwgMTEwKSwgc2V0dGluZ3Mud2F0ZXJtYXJrLmVuYWJsZWQsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy53YXRlcm1hcmsuZW5hYmxlZCA9IHZhbHVlCgkJCXdhdGVybWFyay5WaXNpYmxlID0gdmFsdWUKCQllbmQpCgoJCWNyZWF0ZVNsaWRlcigiUG9zaXRpb24gWCIsIFVEaW0yLm5ldygwLCAwLCAwLCAxMzApLCBzZXR0aW5ncy53YXRlcm1hcmsucG9zaXRpb24ueCwgMCwgMTAwLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3Mud2F0ZXJtYXJrLnBvc2l0aW9uLnggPSB2YWx1ZQoJCQl3YXRlcm1hcmsuUG9zaXRpb24gPSBVRGltMi5uZXcodmFsdWUvMTAwLCAwLCB3YXRlcm1hcmsuUG9zaXRpb24uWS5TY2FsZSwgMCkKCQllbmQpCgoJCWNyZWF0ZVNsaWRlcigiUG9zaXRpb24gWSIsIFVEaW0yLm5ldygwLCAwLCAwLCAxNTApLCBzZXR0aW5ncy53YXRlcm1hcmsucG9zaXRpb24ueSwgMCwgMTAwLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3Mud2F0ZXJtYXJrLnBvc2l0aW9uLnkgPSB2YWx1ZQoJCQl3YXRlcm1hcmsuUG9zaXRpb24gPSBVRGltMi5uZXcod2F0ZXJtYXJrLlBvc2l0aW9uLlguU2NhbGUsIDAsIHZhbHVlLzEwMCwgMCkKCQllbmQpCgoJCWNyZWF0ZUxhYmVsKCJUaGVtZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAxODApKQoJCWxvY2FsIHRoZW1lWSA9IDIwMAoJCWZvciB0aGVtZU5hbWUsIHRoZW1lRGF0YSBpbiBwYWlycyh0aGVtZXMpIGRvCgkJCWNyZWF0ZUJ1dHRvbih0aGVtZURhdGEubmFtZSwgVURpbTIubmV3KDAsIDAsIDAsIHRoZW1lWSksIGZ1bmN0aW9uKCkKCQkJCXNldHRpbmdzLnRoZW1lID0gdGhlbWVOYW1lCgkJCQlhcHBseVRoZW1lKCkKCQkJZW5kKQoJCQl0aGVtZVkgPSB0aGVtZVkgKyAyMAoJCWVuZAoKCWVsc2VpZiBzZXR0aW5ncy5jdXJyZW50VGFiID09ICJQbGF5ZXIiIHRoZW4KCQljcmVhdGVMYWJlbCgiTW92ZW1lbnQiLCBVRGltMi5uZXcoMCwgMCwgMCwgMCkpCgoJCWxvY2FsIGZseVRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiRmx5IiwgVURpbTIubmV3KDAsIDAsIDAsIDIwKSwgc2V0dGluZ3MuZmx5RW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmZseUVuYWJsZWQgPSB2YWx1ZQoJCQl0b2dnbGVGbHkodmFsdWUpCgkJZW5kKQoKCQlsb2NhbCBub2NsaXBUb2dnbGUgPSBjcmVhdGVUb2dnbGUoIk5vY2xpcCIsIFVEaW0yLm5ldygwLCAwLCAwLCA0MCksIHNldHRpbmdzLm5vY2xpcEVuYWJsZWQsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5ub2NsaXBFbmFibGVkID0gdmFsdWUKCQkJdG9nZ2xlTm9jbGlwKHZhbHVlKQoJCWVuZCkKCgkJbG9jYWwgZnJlZXplVG9nZ2xlID0gY3JlYXRlVG9nZ2xlKCJGcmVlemUiLCBVRGltMi5uZXcoMCwgMCwgMCwgNjApLCBzZXR0aW5ncy5mcmVlemVFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuZnJlZXplRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUZyZWV6ZSh2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIHN3aW1Ub2dnbGUgPSBjcmVhdGVUb2dnbGUoIlN3aW0iLCBVRGltMi5uZXcoMCwgMCwgMCwgODApLCBzZXR0aW5ncy5zd2ltRW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLnN3aW1FbmFibGVkID0gdmFsdWUKCQkJdG9nZ2xlU3dpbSh2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIGdvZE1vZGVUb2dnbGUgPSBjcmVhdGVUb2dnbGUoIkdvZCBNb2RlIiwgVURpbTIubmV3KDAsIDAsIDAsIDEwMCksIHNldHRpbmdzLmdvZE1vZGVFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuZ29kTW9kZUVuYWJsZWQgPSB2YWx1ZQoJCQl0b2dnbGVHb2RNb2RlKHZhbHVlKQoJCWVuZCkKCgkJbG9jYWwgYmhvcFRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiQnVubnkgSG9wIiwgVURpbTIubmV3KDAsIDAsIDAsIDEyMCksIHNldHRpbmdzLmJob3BFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuYmhvcEVuYWJsZWQgPSB2YWx1ZQoJCQl0b2dnbGVCaG9wKHZhbHVlKQoJCWVuZCkKCgkJbG9jYWwgaW5mSnVtcFRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiSW5maW5pdGUgSnVtcCIsIFVEaW0yLm5ldygwLCAwLCAwLCAxNDApLCBzZXR0aW5ncy5pbmZpbml0ZUp1bXBFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuaW5maW5pdGVKdW1wRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUluZmluaXRlSnVtcCh2YWx1ZSkKCQllbmQpCgoJCWNyZWF0ZVNsaWRlcigiRmx5IFNwZWVkIiwgVURpbTIubmV3KDAsIDAsIDAsIDE2MCksIHNldHRpbmdzLmZseVNwZWVkLCAxMCwgNTAwLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuZmx5U3BlZWQgPSB2YWx1ZQoJCWVuZCkKCgkJY3JlYXRlU2xpZGVyKCJXYWxrIFNwZWVkIiwgVURpbTIubmV3KDAsIDAsIDAsIDE4MCksIHNldHRpbmdzLndhbGtTcGVlZCwgMTYsIDUwMCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLndhbGtTcGVlZCA9IHZhbHVlCgkJCWh1bWFub2lkLldhbGtTcGVlZCA9IHZhbHVlCgkJZW5kKQoKCQljcmVhdGVTbGlkZXIoIkp1bXAgUG93ZXIiLCBVRGltMi5uZXcoMCwgMCwgMCwgMjAwKSwgc2V0dGluZ3MuanVtcFBvd2VyLCA1MCwgMTAwMCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmp1bXBQb3dlciA9IHZhbHVlCgkJCWh1bWFub2lkLkp1bXBQb3dlciA9IHZhbHVlCgkJZW5kKQoKCQljcmVhdGVMYWJlbCgiUGxheWVyIENvbnRyb2wiLCBVRGltMi5uZXcoMCwgMCwgMCwgMjMwKSkKCgkJY3JlYXRlQnV0dG9uKCJTZWxlY3QgUGxheWVyIiwgVURpbTIubmV3KDAsIDAsIDAsIDI1MCksIGZ1bmN0aW9uKCkKCQkJcGxheWVyTGlzdEZyYW1lLlZpc2libGUgPSB0cnVlCgkJCXVwZGF0ZVBsYXllckxpc3QoKQoJCWVuZCkKCgkJY3JlYXRlQnV0dG9uKCJUaHJvdyBQbGF5ZXIiLCBVRGltMi5uZXcoMCwgMCwgMCwgMjcwKSwgZnVuY3Rpb24oKQoJCQl0aHJvd1BsYXllcigpCgkJZW5kKQoKCQljcmVhdGVCdXR0b24oIlRlbGVwb3J0IHRvIFBsYXllciIsIFVEaW0yLm5ldygwLCAwLCAwLCAyOTApLCBmdW5jdGlvbigpCgkJCXRlbGVwb3J0VG9QbGF5ZXIoKQoJCWVuZCkKCgllbHNlaWYgc2V0dGluZ3MuY3VycmVudFRhYiA9PSAiVmlzdWFsIiB0aGVuCgkJY3JlYXRlTGFiZWwoIkVmZmVjdHMiLCBVRGltMi5uZXcoMCwgMCwgMCwgMCkpCgoJCWxvY2FsIGZvdlRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiQ3VzdG9tIEZPViIsIFVEaW0yLm5ldygwLCAwLCAwLCAyMCksIHNldHRpbmdzLmZvdkVuYWJsZWQsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5mb3ZFbmFibGVkID0gdmFsdWUKCQkJdG9nZ2xlRm92KHZhbHVlKQoJCWVuZCkKCgkJY3JlYXRlU2xpZGVyKCJGT1YgVmFsdWUiLCBVRGltMi5uZXcoMCwgMCwgMCwgNDApLCBzZXR0aW5ncy5jdXN0b21Gb3YsIDEwLCAxMjAsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5jdXN0b21Gb3YgPSB2YWx1ZQoJCQlpZiBzZXR0aW5ncy5mb3ZFbmFibGVkIHRoZW4KCQkJCWNhbWVyYS5GaWVsZE9mVmlldyA9IHZhbHVlCgkJCWVuZAoJCWVuZCkKCgkJbG9jYWwgY3Jvc3NoYWlyVG9nZ2xlID0gY3JlYXRlVG9nZ2xlKCJDcm9zc2hhaXIiLCBVRGltMi5uZXcoMCwgMCwgMCwgNjApLCBzZXR0aW5ncy5jcm9zc2hhaXJFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuY3Jvc3NoYWlyRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUNyb3NzaGFpcih2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIHRyYWNlcnNUb2dnbGUgPSBjcmVhdGVUb2dnbGUoIlRyYWNlcnMiLCBVRGltMi5uZXcoMCwgMCwgMCwgODApLCBzZXR0aW5ncy50cmFjZXJzRW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLnRyYWNlcnNFbmFibGVkID0gdmFsdWUKCQkJdG9nZ2xlVHJhY2Vycyh2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIGZ1bGxicmlnaHRUb2dnbGUgPSBjcmVhdGVUb2dnbGUoIkZ1bGxicmlnaHQiLCBVRGltMi5uZXcoMCwgMCwgMCwgMTAwKSwgc2V0dGluZ3MuZnVsbGJyaWdodEVuYWJsZWQsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5mdWxsYnJpZ2h0RW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUZ1bGxicmlnaHQodmFsdWUpCgkJZW5kKQoKCQlsb2NhbCBub0ZvZ1RvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiTm8gRm9nIiwgVURpbTIubmV3KDAsIDAsIDAsIDEyMCksIHNldHRpbmdzLm5vRm9nRW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLm5vRm9nRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZU5vRm9nKHZhbHVlKQoJCWVuZCkKCgkJbG9jYWwgZmlyZVRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiRmlyZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAxNDApLCBzZXR0aW5ncy5maXJlRW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmZpcmVFbmFibGVkID0gdmFsdWUKCQkJdG9nZ2xlRmlyZSh2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIGRpc2NvVG9nZ2xlID0gY3JlYXRlVG9nZ2xlKCJEaXNjbyBNb2RlIiwgVURpbTIubmV3KDAsIDAsIDAsIDE2MCksIHNldHRpbmdzLmRpc2NvRW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmRpc2NvRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZURpc2NvKHZhbHVlKQoJCWVuZCkKCgkJY3JlYXRlQnV0dG9uKCJSZWQgRmlyZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAxODApLCBmdW5jdGlvbigpCgkJCXNldHRpbmdzLmZpcmVDb2xvciA9IENvbG9yMy5uZXcoMSwgMCwgMCkKCQkJaWYgc2V0dGluZ3MuZmlyZUVuYWJsZWQgdGhlbgoJCQkJdG9nZ2xlRmlyZShmYWxzZSkKCQkJCXRvZ2dsZUZpcmUodHJ1ZSkKCQkJZW5kCgkJZW5kKQoKCQljcmVhdGVCdXR0b24oIkJsdWUgRmlyZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAyMDApLCBmdW5jdGlvbigpCgkJCXNldHRpbmdzLmZpcmVDb2xvciA9IENvbG9yMy5uZXcoMCwgMC41LCAxKQoJCQlpZiBzZXR0aW5ncy5maXJlRW5hYmxlZCB0aGVuCgkJCQl0b2dnbGVGaXJlKGZhbHNlKQoJCQkJdG9nZ2xlRmlyZSh0cnVlKQoJCQllbmQKCQllbmQpCgoJCWNyZWF0ZUJ1dHRvbigiR3JlZW4gRmlyZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAyMjApLCBmdW5jdGlvbigpCgkJCXNldHRpbmdzLmZpcmVDb2xvciA9IENvbG9yMy5uZXcoMCwgMSwgMCkKCQkJaWYgc2V0dGluZ3MuZmlyZUVuYWJsZWQgdGhlbgoJCQkJdG9nZ2xlRmlyZShmYWxzZSkKCQkJCXRvZ2dsZUZpcmUodHJ1ZSkKCQkJZW5kCgkJZW5kKQoKCQljcmVhdGVMYWJlbCgiQ2hhbXMiLCBVRGltMi5uZXcoMCwgMCwgMCwgMjUwKSkKCQlsb2NhbCBjaGFtc1RvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiRW5hYmxlZCIsIFVEaW0yLm5ldygwLCAwLCAwLCAyNzApLCBzZXR0aW5ncy5jaGFtc0VuYWJsZWQsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5jaGFtc0VuYWJsZWQgPSB2YWx1ZQoJCQl0b2dnbGVDaGFtcyh2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIGNoYW1zVGVhbVRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiVGVhbSBDaGVjayIsIFVEaW0yLm5ldygwLCAwLCAwLCAyOTApLCBzZXR0aW5ncy5jaGFtc1RlYW1DaGVjaywgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmNoYW1zVGVhbUNoZWNrID0gdmFsdWUKCQkJdXBkYXRlQ2hhbXNTZXR0aW5ncygpCgkJZW5kKQoKCQljcmVhdGVTbGlkZXIoIlRyYW5zcGFyZW5jeSIsIFVEaW0yLm5ldygwLCAwLCAwLCAzMTApLCBzZXR0aW5ncy5jaGFtc1RyYW5zcGFyZW5jeSAqIDEwLCAwLCAxMCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmNoYW1zVHJhbnNwYXJlbmN5ID0gdmFsdWUgLyAxMAoJCQl1cGRhdGVDaGFtc1NldHRpbmdzKCkKCQllbmQpCgoJZWxzZWlmIHNldHRpbmdzLmN1cnJlbnRUYWIgPT0gIkZ1biIgdGhlbgoJCWNyZWF0ZUxhYmVsKCJGdW4gU3R1ZmYiLCBVRGltMi5uZXcoMCwgMCwgMCwgMCkpCgoJCWxvY2FsIHNwYW1Ub2dnbGUgPSBjcmVhdGVUb2dnbGUoIkNoYXQgU3BhbSIsIFVEaW0yLm5ldygwLCAwLCAwLCAyMCksIHNldHRpbmdzLnNwYW1FbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3Muc3BhbUVuYWJsZWQgPSB2YWx1ZQoJCQl0b2dnbGVTcGFtKHZhbHVlKQoJCWVuZCkKCgkJY3JlYXRlVGV4dEJveCgiU3BhbSBNZXNzYWdlIiwgVURpbTIubmV3KDAsIDAsIDAsIDQwKSwgc2V0dGluZ3Muc3BhbU1lc3NhZ2UsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5zcGFtTWVzc2FnZSA9IHZhbHVlCgkJZW5kKQoKCQljcmVhdGVTbGlkZXIoIlNwYW0gRGVsYXkiLCBVRGltMi5uZXcoMCwgMCwgMCwgNjApLCBzZXR0aW5ncy5zcGFtRGVsYXksIDAuMSwgNSwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLnNwYW1EZWxheSA9IHZhbHVlCgkJZW5kKQoKCQlsb2NhbCBhdXRvRmFybVRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiQXV0byBGYXJtIE1NMiIsIFVEaW0yLm5ldygwLCAwLCAwLCA4MCksIHNldHRpbmdzLmF1dG9GYXJtRW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLmF1dG9GYXJtRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUF1dG9GYXJtKHZhbHVlKQoJCWVuZCkKCgkJbG9jYWwgZmFrZUxhZ1RvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiRmFrZSBMYWciLCBVRGltMi5uZXcoMCwgMCwgMCwgMTAwKSwgc2V0dGluZ3MuZmFrZUxhZ0VuYWJsZWQsIGZ1bmN0aW9uKHZhbHVlKQoJCQlzZXR0aW5ncy5mYWtlTGFnRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUZha2VMYWcodmFsdWUpCgkJZW5kKQoKCQljcmVhdGVTbGlkZXIoIkxhZyBBbW91bnQiLCBVRGltMi5uZXcoMCwgMCwgMCwgMTIwKSwgc2V0dGluZ3MuZmFrZUxhZ0Ftb3VudCwgMC4xLCAyLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuZmFrZUxhZ0Ftb3VudCA9IHZhbHVlCgkJZW5kKQoKCQlsb2NhbCBpbnZpc2libGVUb2dnbGUgPSBjcmVhdGVUb2dnbGUoIkludmlzaWJsZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAxNDApLCBzZXR0aW5ncy5pbnZpc2libGVFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuaW52aXNpYmxlRW5hYmxlZCA9IHZhbHVlCgkJCXRvZ2dsZUludmlzaWJsZSh2YWx1ZSkKCQllbmQpCgoJCWxvY2FsIGFudGlBZmtUb2dnbGUgPSBjcmVhdGVUb2dnbGUoIkFudGktQUZLIiwgVURpbTIubmV3KDAsIDAsIDAsIDE2MCksIHNldHRpbmdzLmFudGlBZmtFbmFibGVkLCBmdW5jdGlvbih2YWx1ZSkKCQkJc2V0dGluZ3MuYW50aUFma0VuYWJsZWQgPSB2YWx1ZQoJCQl0b2dnbGVBbnRpQWZrKHZhbHVlKQoJCWVuZCkKCgkJbG9jYWwgc3BpbmJvdFRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgiU3BpbmJvdCIsIFVEaW0yLm5ldygwLCAwLCAwLCAxODApLCBzZXR0aW5ncy5zcGluYm90RW5hYmxlZCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLnNwaW5ib3RFbmFibGVkID0gdmFsdWUKCQkJdG9nZ2xlU3BpbmJvdCh2YWx1ZSkKCQllbmQpCgoJCWNyZWF0ZVNsaWRlcigiU3BpbmJvdCBTcGVlZCIsIFVEaW0yLm5ldygwLCAwLCAwLCAyMDApLCBzZXR0aW5ncy5zcGluYm90U3BlZWQsIDEsIDEwMCwgZnVuY3Rpb24odmFsdWUpCgkJCXNldHRpbmdzLnNwaW5ib3RTcGVlZCA9IHZhbHVlCgkJZW5kKQoKCWVsc2VpZiBzZXR0aW5ncy5jdXJyZW50VGFiID09ICJDb25maWciIHRoZW4KCQljcmVhdGVMYWJlbCgiS2V5YmluZHMiLCBVRGltMi5uZXcoMCwgMCwgMCwgMCkpCgoJCWNyZWF0ZUJ1dHRvbigiVG9nZ2xlIE1lbnU6ICIgLi4gc2V0dGluZ3Mua2V5YmluZHMudG9nZ2xlTWVudS5OYW1lLCBVRGltMi5uZXcoMCwgMCwgMCwgMjApLCBmdW5jdGlvbigpCgkJCWxvY2FsIGtleSA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0S2V5c1ByZXNzZWQoKVsxXQoJCQlpZiBrZXkgdGhlbgoJCQkJc2V0dGluZ3Mua2V5YmluZHMudG9nZ2xlTWVudSA9IGtleS5LZXlDb2RlCgkJCQl1cGRhdGVUYWIoKQoJCQllbmQKCQllbmQpCgoJCWNyZWF0ZUJ1dHRvbigiRmx5OiAiIC4uIHNldHRpbmdzLmtleWJpbmRzLmZseS5OYW1lLCBVRGltMi5uZXcoMCwgMCwgMCwgNDApLCBmdW5jdGlvbigpCgkJCWxvY2FsIGtleSA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0S2V5c1ByZXNzZWQoKVsxXQoJCQlpZiBrZXkgdGhlbgoJCQkJc2V0dGluZ3Mua2V5YmluZHMuZmx5ID0ga2V5LktleUNvZGUKCQkJCXVwZGF0ZVRhYigpCgkJCWVuZAoJCWVuZCkKCgkJY3JlYXRlQnV0dG9uKCJOb2NsaXA6ICIgLi4gc2V0dGluZ3Mua2V5YmluZHMubm9jbGlwLk5hbWUsIFVEaW0yLm5ldygwLCAwLCAwLCA2MCksIGZ1bmN0aW9uKCkKCQkJbG9jYWwga2V5ID0gVXNlcklucHV0U2VydmljZTpHZXRLZXlzUHJlc3NlZCgpWzFdCgkJCWlmIGtleSB0aGVuCgkJCQlzZXR0aW5ncy5rZXliaW5kcy5ub2NsaXAgPSBrZXkuS2V5Q29kZQoJCQkJdXBkYXRlVGFiKCkKCQkJZW5kCgkJZW5kKQoKCQljcmVhdGVCdXR0b24oIlJlam9pbjogIiAuLiBzZXR0aW5ncy5rZXliaW5kcy5yZWpvaW4uTmFtZSwgVURpbTIubmV3KDAsIDAsIDAsIDgwKSwgZnVuY3Rpb24oKQoJCQlsb2NhbCBrZXkgPSBVc2VySW5wdXRTZXJ2aWNlOkdldEtleXNQcmVzc2VkKClbMV0KCQkJaWYga2V5IHRoZW4KCQkJCXNldHRpbmdzLmtleWJpbmRzLnJlam9pbiA9IGtleS5LZXlDb2RlCgkJCQl1cGRhdGVUYWIoKQoJCQllbmQKCQllbmQpCgoJCWNyZWF0ZUxhYmVsKCJDb25maWcgU2F2ZS9Mb2FkIiwgVURpbTIubmV3KDAsIDAsIDAsIDExMCkpCgoJCWxvY2FsIGNvbmZpZ05hbWUgPSBJbnN0YW5jZS5uZXcoIlRleHRCb3giKQoJCWNvbmZpZ05hbWUuVGV4dCA9ICJkZWZhdWx0IgoJCWNvbmZpZ05hbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDAsIDIwKQoJCWNvbmZpZ05hbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMTMwKQoJCWNvbmZpZ05hbWUuVGV4dENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udGV4dENvbG9yCgkJY29uZmlnTmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5idXR0b25Db2xvcgoJCWNvbmZpZ05hbWUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW0KCQljb25maWdOYW1lLlRleHRTaXplID0gMTQKCQljb25maWdOYW1lLlBhcmVudCA9IGNvbnRlbnRGcmFtZQoKCQljcmVhdGVCdXR0b24oIlNhdmUgQ29uZmlnIiwgVURpbTIubmV3KDAsIDAsIDAsIDE1MCksIGZ1bmN0aW9uKCkKCQkJbG9jYWwgY29uZmlnID0gewoJCQkJc2V0dGluZ3MgPSBzZXR0aW5ncywKCQkJCXRoZW1lID0gc2V0dGluZ3MudGhlbWUKCQkJfQoJCQl3cml0ZWZpbGUoImRpbnlhXyIgLi4gY29uZmlnTmFtZS5UZXh0IC4uICIuY2ZnIiwgSHR0cFNlcnZpY2U6SlNPTkVuY29kZShjb25maWcpKQoJCWVuZCkKCgkJY3JlYXRlQnV0dG9uKCJMb2FkIENvbmZpZyIsIFVEaW0yLm5ldygwLCAwLCAwLCAxNzApLCBmdW5jdGlvbigpCgkJCWlmIGlzZmlsZSgiZGlueWFfIiAuLiBjb25maWdOYW1lLlRleHQgLi4gIi5jZmciKSB0aGVuCgkJCQlsb2NhbCBjb25maWcgPSBIdHRwU2VydmljZTpKU09ORGVjb2RlKHJlYWRmaWxlKCJkaW55YV8iIC4uIGNvbmZpZ05hbWUuVGV4dCAuLiAiLmNmZyIpKQoJCQkJc2V0dGluZ3MgPSBjb25maWcuc2V0dGluZ3MKCQkJCXNldHRpbmdzLnRoZW1lID0gY29uZmlnLnRoZW1lCgkJCQlhcHBseVRoZW1lKCkKCQkJCXVwZGF0ZVRhYigpCgkJCWVuZAoJCWVuZCkKCgllbHNlaWYgc2V0dGluZ3MuY3VycmVudFRhYiA9PSAiQ3JlZGl0cyIgdGhlbgoJCWNyZWF0ZUxhYmVsKCJkaW55YS5mcmVlIiwgVURpbTIubmV3KDAsIDEwLCAwLCAwKSkKCQljcmVhdGVMYWJlbCgiVmVyc2lvbiAxLjAiLCBVRGltMi5uZXcoMCwgMTAsIDAsIDIwKSkKCQljcmVhdGVMYWJlbCgiRGV2ZWxvcGVkIGJ5IFRpcG9Kb2tlciIsIFVEaW0yLm5ldygwLCAxMCwgMCwgNDApKQoJZW5kCmVuZAoKLS0gQ3JlYXRlIHRhYiBidXR0b25zCmZvciBpLCB0YWIgaW4gaXBhaXJzKHRhYnMpIGRvCglsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJYnV0dG9uLlRleHQgPSB0YWIKCWJ1dHRvbi5TaXplID0gVURpbTIubmV3KDEvI3RhYnMsIDAsIDAsIDMwKQoJYnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KChpLTEpLyN0YWJzLCAwLCAwLCAzMCkKCWJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gdGFiID09IHNldHRpbmdzLmN1cnJlbnRUYWIgYW5kIHRoZW1lc1tzZXR0aW5ncy50aGVtZV0uYWN0aXZlVGFiQ29sb3Igb3IgdGhlbWVzW3NldHRpbmdzLnRoZW1lXS5pbmFjdGl2ZVRhYkNvbG9yCglidXR0b24uVGV4dENvbG9yMyA9IHRoZW1lc1tzZXR0aW5ncy50aGVtZV0udGV4dENvbG9yCglidXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCglidXR0b24uVGV4dFNpemUgPSAxNAoJYnV0dG9uLlBhcmVudCA9IG1haW5GcmFtZQoKCWJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKCQlzZXR0aW5ncy5jdXJyZW50VGFiID0gdGFiCgkJdXBkYXRlVGFiKCkKCWVuZCkKCgl0YWJCdXR0b25zW3RhYl0gPSBidXR0b24KZW5kCgotLSBGUFMgYW5kIFBpbmcgc3lzdGVtCmxvY2FsIGxhc3RUaW1lID0gb3MuY2xvY2soKQpsb2NhbCBmcmFtZUNvdW50ID0gMApsb2NhbCBhY3R1YWxGUFMgPSAwCgpsb2NhbCBmdW5jdGlvbiBnZXRQaW5nKCkKCWxvY2FsIHN0YXRzID0gU3RhdHMuTmV0d29yazpGaW5kRmlyc3RDaGlsZCgiU2VydmVyU3RhdHNJdGVtIikKCXJldHVybiBzdGF0cyBhbmQgbWF0aC5mbG9vcihzdGF0czpHZXRWYWx1ZSgpKSBvciAwCmVuZAoKbG9jYWwgZnVuY3Rpb24gdXBkYXRlV2F0ZXJtYXJrKCkKCWxvY2FsIHBpbmcgPSBnZXRQaW5nKCkKCXVwZGF0ZVRpbWUoKQoJd2F0ZXJtYXJrVGV4dC5UZXh0ID0gc3RyaW5nLmZvcm1hdCgiZGlueWEuZnJlZSB8IHYxLjAgfCAlcyB8ICVkIGZwcyB8ICVkbXMiLCAKCQlwbGF5ZXIuTmFtZSwgYWN0dWFsRlBTLCBwaW5nKQplbmQKClJ1blNlcnZpY2UuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKCWZyYW1lQ291bnQgPSBmcmFtZUNvdW50ICsgMQoJbG9jYWwgY3VycmVudFRpbWUgPSBvcy5jbG9jaygpCgoJaWYgY3VycmVudFRpbWUgLSBsYXN0VGltZSA+PSAwLjUgdGhlbgoJCWFjdHVhbEZQUyA9IG1hdGguZmxvb3IoZnJhbWVDb3VudCAvIChjdXJyZW50VGltZSAtIGxhc3RUaW1lKSkKCQlmcmFtZUNvdW50ID0gMAoJCWxhc3RUaW1lID0gY3VycmVudFRpbWUKCQl1cGRhdGVXYXRlcm1hcmsoKQoJZW5kCmVuZCkKCmxvY2FsIHRpbWVVcGRhdGVDb25uZWN0aW9uCnRpbWVVcGRhdGVDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCglpZiBvcy5jbG9jaygpICUgMSA8IDAuMSB0aGVuCgkJdXBkYXRlVGltZSgpCgllbmQKZW5kKQoKLS0gV2luZG93IGRyYWdnaW5nCmxvY2FsIGRyYWdnaW5nID0gZmFsc2UKbG9jYWwgZHJhZ1N0YXJ0UG9zLCBmcmFtZVN0YXJ0UG9zCgp0aXRsZS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCglpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgdGhlbgoJCWRyYWdnaW5nID0gdHJ1ZQoJCWRyYWdTdGFydFBvcyA9IFZlY3RvcjIubmV3KGlucHV0LlBvc2l0aW9uLlgsIGlucHV0LlBvc2l0aW9uLlkpCgkJZnJhbWVTdGFydFBvcyA9IG1haW5GcmFtZS5Qb3NpdGlvbgoJZW5kCmVuZCkKClVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCglpZiBkcmFnZ2luZyBhbmQgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VNb3ZlbWVudCB0aGVuCgkJbG9jYWwgZGVsdGEgPSBWZWN0b3IyLm5ldyhpbnB1dC5Qb3NpdGlvbi5YLCBpbnB1dC5Qb3NpdGlvbi5ZKSAtIGRyYWdTdGFydFBvcwoJCW1haW5GcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygKCQkJZnJhbWVTdGFydFBvcy5YLlNjYWxlLCBmcmFtZVN0YXJ0UG9zLlguT2Zmc2V0ICsgZGVsdGEuWCwKCQkJZnJhbWVTdGFydFBvcy5ZLlNjYWxlLCBmcmFtZVN0YXJ0UG9zLlkuT2Zmc2V0ICsgZGVsdGEuWQoJCSkKCWVuZAplbmQpCgpVc2VySW5wdXRTZXJ2aWNlLklucHV0RW5kZWQ6Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCWlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCgkJZHJhZ2dpbmcgPSBmYWxzZQoJZW5kCmVuZCkKCi0tIFdhdGVybWFyayBkcmFnZ2luZwpsb2NhbCB3bURyYWdnaW5nID0gZmFsc2UKbG9jYWwgd21EcmFnU3RhcnQsIHdtRnJhbWVTdGFydAoKd2F0ZXJtYXJrLklucHV0QmVnYW46Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCWlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCgkJd21EcmFnZ2luZyA9IHRydWUKCQl3bURyYWdTdGFydCA9IFZlY3RvcjIubmV3KGlucHV0LlBvc2l0aW9uLlgsIGlucHV0LlBvc2l0aW9uLlkpCgkJd21GcmFtZVN0YXJ0ID0gd2F0ZXJtYXJrLlBvc2l0aW9uCgllbmQKZW5kKQoKVXNlcklucHV0U2VydmljZS5JbnB1dENoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCWlmIHdtRHJhZ2dpbmcgYW5kIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlTW92ZW1lbnQgdGhlbgoJCWxvY2FsIGRlbHRhID0gVmVjdG9yMi5uZXcoaW5wdXQuUG9zaXRpb24uWCwgaW5wdXQuUG9zaXRpb24uWSkgLSB3bURyYWdTdGFydAoJCXdhdGVybWFyay5Qb3NpdGlvbiA9IFVEaW0yLm5ldygKCQkJd21GcmFtZVN0YXJ0LlguU2NhbGUsIHdtRnJhbWVTdGFydC5YLk9mZnNldCArIGRlbHRhLlgsCgkJCXdtRnJhbWVTdGFydC5ZLlNjYWxlLCB3bUZyYW1lU3RhcnQuWS5PZmZzZXQgKyBkZWx0YS5ZCgkJKQoJCXNldHRpbmdzLndhdGVybWFyay5wb3NpdGlvbi54ID0gd2F0ZXJtYXJrLlBvc2l0aW9uLlguU2NhbGUgKiAxMDAKCQlzZXR0aW5ncy53YXRlcm1hcmsucG9zaXRpb24ueSA9IHdhdGVybWFyay5Qb3NpdGlvbi5ZLlNjYWxlICogMTAwCgllbmQKZW5kKQoKVXNlcklucHV0U2VydmljZS5JbnB1dEVuZGVkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCglpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgdGhlbgoJCXdtRHJhZ2dpbmcgPSBmYWxzZQoJZW5kCmVuZCkKCi0tIEtleWJpbmRzClVzZXJJbnB1dFNlcnZpY2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBwcm9jZXNzZWQpCglpZiBub3QgcHJvY2Vzc2VkIHRoZW4KCQlpZiBpbnB1dC5LZXlDb2RlID09IHNldHRpbmdzLmtleWJpbmRzLnRvZ2dsZU1lbnUgdGhlbgoJCQlzZXR0aW5ncy5vcGVuID0gbm90IHNldHRpbmdzLm9wZW4KCQkJbWFpbkZyYW1lLlZpc2libGUgPSBzZXR0aW5ncy5vcGVuCgkJZWxzZWlmIGlucHV0LktleUNvZGUgPT0gc2V0dGluZ3Mua2V5YmluZHMuZmx5IHRoZW4KCQkJc2V0dGluZ3MuZmx5RW5hYmxlZCA9IG5vdCBzZXR0aW5ncy5mbHlFbmFibGVkCgkJCXRvZ2dsZUZseShzZXR0aW5ncy5mbHlFbmFibGVkKQoJCQl1cGRhdGVUYWIoKQoJCWVsc2VpZiBpbnB1dC5LZXlDb2RlID09IHNldHRpbmdzLmtleWJpbmRzLm5vY2xpcCB0aGVuCgkJCXNldHRpbmdzLm5vY2xpcEVuYWJsZWQgPSBub3Qgc2V0dGluZ3Mubm9jbGlwRW5hYmxlZAoJCQl0b2dnbGVOb2NsaXAoc2V0dGluZ3Mubm9jbGlwRW5hYmxlZCkKCQkJdXBkYXRlVGFiKCkKCQllbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBzZXR0aW5ncy5rZXliaW5kcy5yZWpvaW4gdGhlbgoJCQlyZWpvaW5TZXJ2ZXIoKQoJCWVuZAoJZW5kCmVuZCkKCi0tIENoYXJhY3RlciBoYW5kbGluZwpsb2NhbCBmdW5jdGlvbiBoYW5kbGVDaGFyYWN0ZXJBZGRlZChuZXdDaGFyYWN0ZXIpCgljaGFyYWN0ZXIgPSBuZXdDaGFyYWN0ZXIKCWh1bWFub2lkID0gY2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKQoKCWh1bWFub2lkLldhbGtTcGVlZCA9IHNldHRpbmdzLndhbGtTcGVlZAoJaHVtYW5vaWQuSnVtcFBvd2VyID0gc2V0dGluZ3MuanVtcFBvd2VyCgoJaWYgc2V0dGluZ3MuZmx5RW5hYmxlZCB0aGVuIHRvZ2dsZUZseSh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLm5vY2xpcEVuYWJsZWQgdGhlbiB0b2dnbGVOb2NsaXAodHJ1ZSkgZW5kCglpZiBzZXR0aW5ncy5mcmVlemVFbmFibGVkIHRoZW4gdG9nZ2xlRnJlZXplKHRydWUpIGVuZAoJaWYgc2V0dGluZ3Muc3dpbUVuYWJsZWQgdGhlbiB0b2dnbGVTd2ltKHRydWUpIGVuZAoJaWYgc2V0dGluZ3MuZmlyZUVuYWJsZWQgdGhlbiB0b2dnbGVGaXJlKHRydWUpIGVuZAoJaWYgc2V0dGluZ3MuZGlzY29FbmFibGVkIHRoZW4gdG9nZ2xlRGlzY28odHJ1ZSkgZW5kCglpZiBzZXR0aW5ncy5zcGFtRW5hYmxlZCB0aGVuIHRvZ2dsZVNwYW0odHJ1ZSkgZW5kCglpZiBzZXR0aW5ncy5jaGFtc0VuYWJsZWQgdGhlbiB0b2dnbGVDaGFtcyh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLmdvZE1vZGVFbmFibGVkIHRoZW4gdG9nZ2xlR29kTW9kZSh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLmF1dG9GYXJtRW5hYmxlZCB0aGVuIHRvZ2dsZUF1dG9GYXJtKHRydWUpIGVuZAoJaWYgc2V0dGluZ3MuZmFrZUxhZ0VuYWJsZWQgdGhlbiB0b2dnbGVGYWtlTGFnKHRydWUpIGVuZAoJaWYgc2V0dGluZ3MuaW52aXNpYmxlRW5hYmxlZCB0aGVuIHRvZ2dsZUludmlzaWJsZSh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLmJob3BFbmFibGVkIHRoZW4gdG9nZ2xlQmhvcCh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLmluZmluaXRlSnVtcEVuYWJsZWQgdGhlbiB0b2dnbGVJbmZpbml0ZUp1bXAodHJ1ZSkgZW5kCglpZiBzZXR0aW5ncy5mb3ZFbmFibGVkIHRoZW4gdG9nZ2xlRm92KHRydWUpIGVuZAoJaWYgc2V0dGluZ3MuY3Jvc3NoYWlyRW5hYmxlZCB0aGVuIHRvZ2dsZUNyb3NzaGFpcih0cnVlKSBlbmQKCWlmIHNldHRpbmdzLnRyYWNlcnNFbmFibGVkIHRoZW4gdG9nZ2xlVHJhY2Vycyh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLmZ1bGxicmlnaHRFbmFibGVkIHRoZW4gdG9nZ2xlRnVsbGJyaWdodCh0cnVlKSBlbmQKCWlmIHNldHRpbmdzLm5vRm9nRW5hYmxlZCB0aGVuIHRvZ2dsZU5vRm9nKHRydWUpIGVuZAoJaWYgc2V0dGluZ3MuYW50aUFma0VuYWJsZWQgdGhlbiB0b2dnbGVBbnRpQWZrKHRydWUpIGVuZAoJaWYgc2V0dGluZ3Muc3BpbmJvdEVuYWJsZWQgdGhlbiB0b2dnbGVTcGluYm90KHRydWUpIGVuZAplbmQKCi0tIENvbm5lY3QgY2hhcmFjdGVyIGFkZGVkIGV2ZW50CnBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGhhbmRsZUNoYXJhY3RlckFkZGVkKQoKLS0gSW5pdGlhbGl6YXRpb24KdXBkYXRlVGFiKCkKYXBwbHlUaGVtZSgpCnVwZGF0ZVdhdGVybWFyaygpCgotLSBTZXQgaW5pdGlhbCBjaGFyYWN0ZXIgdmFsdWVzCmh1bWFub2lkLldhbGtTcGVlZCA9IHNldHRpbmdzLndhbGtTcGVlZApodW1hbm9pZC5KdW1wUG93ZXIgPSBzZXR0aW5ncy5qdW1wUG93ZXIKCi0tIEFwcGx5IGluaXRpYWwgZ29kIG1vZGUgaWYgZW5hYmxlZAppZiBzZXR0aW5ncy5nb2RNb2RlRW5hYmxlZCB0aGVuCgl0b2dnbGVHb2RNb2RlKHRydWUpCmVuZA=="))()
